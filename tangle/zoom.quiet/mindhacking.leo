<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20090205120222.1"><vh>@chapters</vh>
<v t="zoomq.20090408143801.1"><vh>stuff</vh>
<v t="zoomq.20091104131309.7"><vh>dot使用</vh></v>
<v t="zoomq.20090409142411.28"><vh>logging.conf</vh></v>
<v t="zoomq.20090408143801.2"><vh>dict sort</vh></v>
<v t="zoomq.20090409142411.1"><vh>groups.google</vh></v>
<v t="zoomq.20070628101624" a="M"><vh>chart tilog</vh>
<v t="zoomq.20070628101624.1"><vh>unittest</vh>
<v t="zoomq.20070628101624.2"><vh>@nosent foo.py</vh>
<v t="zoomq.20070628101624.3"><vh>add2</vh></v>
</v>
</v>
<v t="zoomq.20070628101624.5"><vh>tpl</vh>
<v t="zoomq.20070628101624.6"><vh>@nosent adp_dailyrep.tpl</vh></v>
<v t="zoomq.20070628101624.7"><vh>@nosent adp_historic.tpl</vh></v>
<v t="zoomq.20070628101624.8"><vh>@nosent adp_monthtab.tpl</vh></v>
</v>
<v t="zoomq.20070628101624.9"><vh>@nosent adpanalyzer.py</vh>
<v t="zoomq.20070628101624.10"><vh>&lt;&lt; adpanalyzer declarations &gt;&gt;</vh></v>
<v t="zoomq.20070628101624.11"><vh>flushHistoric</vh>
<v t="zoomq.20070628101624.12"><vh>&lt;&lt;monthlink&gt;&gt;</vh></v>
<v t="zoomq.20070628101624.13"><vh>&lt;&lt;PVdetail&gt;&gt;</vh></v>
<v t="zoomq.20070628101624.14"><vh>&lt;&lt;PVrep&gt;&gt;</vh></v>
</v>
<v t="zoomq.20070628101624.15"><vh>adpAmount</vh></v>
<v t="zoomq.20070628101624.16"><vh>adpDaily</vh></v>
<v t="zoomq.20070628101624.17"><vh>drawDailyPie</vh></v>
<v t="zoomq.20070628101624.18"><vh>repAll</vh></v>
<v t="zoomq.20070628101624.19"><vh>chartDadp</vh></v>
<v t="zoomq.20070628101624.20"><vh>chartHistoric</vh></v>
</v>
<v t="zoomq.20070628101624.27"><vh>@nosent zipadplog.sh</vh></v>
<v t="zoomq.20070628113357"><vh>stateCASE</vh>
<v t="zoomq.20070628101624.21"><vh>yseo6</vh>
<v t="zoomq.20070628101624.22"><vh>tpl4shell</vh>
<v t="zoomq.20070628101624.23"><vh>@nosent yseo6_adpanalyzer.sh.tpl</vh></v>
<v t="zoomq.20070628101624.24"><vh>@nosent yseo6_adpanalyzer.filter.tpl</vh></v>
<v t="zoomq.20070628101624.25"><vh>@nosent yseo6_adpanalyzer.sort.tpl</vh></v>
</v>
<v t="zoomq.20070628101624.26"><vh>@nosent yseo6_adpLogShell.py</vh></v>
</v>
<v t="zoomq.20070628101624.28"><vh>070612urgency</vh>
<v t="zoomq.20070628101624.29"><vh>@nosent urgencyAnalyzer.py</vh>
<v t="zoomq.20070628101624.30"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20070628101624.31"><vh>mergeKey</vh></v>
<v t="zoomq.20070628101624.32"><vh>flushHisCnt</vh>
<v t="zoomq.20070628101624.33"><vh>&lt;&lt;countPV&gt;&gt;</vh></v>
<v t="zoomq.20070628101624.34"><vh>&lt;&lt;expHTML&gt;&gt;</vh></v>
</v>
<v t="zoomq.20070628101624.35"><vh>flushHisAll</vh>
<v t="zoomq.20070628101624.36"><vh>&lt;&lt;countPV&gt;&gt;</vh></v>
<v t="zoomq.20070628101624.37"><vh>&lt;&lt;expHTML&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20070628101624.38"><vh>070622play50top</vh>
<v t="zoomq.20070628101624.39"><vh>@nosent urgencyToPlay.py</vh>
<v t="zoomq.20070628101624.40"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20070628101624.41"><vh>&lt;&lt;abtDB&gt;&gt;</vh></v>
<v t="zoomq.20070628101624.42"><vh>flushHisPlay</vh>
<v t="zoomq.20070628101624.43"><vh>&lt;&lt;countPV&gt;&gt;</vh></v>
<v t="zoomq.20070628101624.44"><vh>&lt;&lt;expHTML&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20070703142601"><vh>070703pvuip</vh>
<v t="zoomq.20070703142601.1"><vh>@nosent urgencyUIPV.py</vh>
<v t="zoomq.20070703142601.2"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20070703142601.3"><vh>&lt;&lt;abtDB&gt;&gt;</vh></v>
<v t="zoomq.20070703142826"><vh>chartHisPV</vh></v>
<v t="zoomq.20070703154520"><vh>chartHisUIP</vh></v>
<v t="zoomq.20070703145221"><vh>scaled</vh></v>
</v>
</v>
</v>
<v t="zoomq.20070628113410"><vh>@nosent ad10song.py</vh>
<v t="zoomq.20070628113410.1"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20070628113410.2"><vh>flushHistoric()</vh>
<v t="zoomq.20070628141214"><vh>&lt;&lt;dataRepare&gt;&gt;</vh></v>
<v t="zoomq.20070628113410.3"><vh>&lt;&lt;monthact&gt;&gt;</vh></v>
</v>
<v t="zoomq.20070706112021"><vh>flushDumps()</vh></v>
<v t="zoomq.20070706111610"><vh>detailsADPlay()</vh></v>
<v t="zoomq.20070628113410.11"><vh>chartHistoric()</vh></v>
</v>
<v t="zoomq.20070719150734"><vh>@nosent adclicks.py</vh>
<v t="zoomq.20070719150734.1"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20070719152838"><vh>staToday()</vh></v>
<v t="zoomq.20070719150734.5"><vh>flushDumps()</vh></v>
<v t="zoomq.20070719150734.6"><vh>detailsADPlay()</vh></v>
<v t="zoomq.20070719150734.7"><vh>chartAdpHistoric()</vh>
<v t="zoomq.20070726123725"><vh>&lt;&lt;chartMap&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20090409142411.2"><vh>@nosent yksitemapping.py</vh>
<v t="zoomq.20090409142411.3"><vh>&lt;&lt; yksitemapping declarations &gt;&gt;</vh></v>
<v t="zoomq.20090409142411.4"><vh>class sitemapping</vh>
<v t="zoomq.20090409142411.5"><vh>__init__</vh>
<v t="zoomq.20090409142411.6"><vh>abtFile</vh></v>
<v t="zoomq.20090409142411.7"><vh>abtDB</vh></v>
</v>
<v t="zoomq.20090409142411.8"><vh>DBscanner</vh></v>
<v t="zoomq.20090409142411.9"><vh>whatnew</vh>
<v t="zoomq.20090409142411.10"><vh>hotop</vh></v>
<v t="zoomq.20090409142411.11"><vh>hisotic</vh></v>
<v t="zoomq.20090409142411.12"><vh>tracall</vh></v>
</v>
<v t="zoomq.20090409142411.13"><vh>_smartcode</vh></v>
<v t="zoomq.20090409142411.14"><vh>gzipall</vh></v>
<v t="zoomq.20090409142411.15"><vh>map2gz</vh></v>
<v t="zoomq.20090409142411.16"><vh>xmlurl</vh></v>
<v t="zoomq.20090409142411.17"><vh>mapall</vh></v>
<v t="zoomq.20090409142411.18"><vh>genidx</vh></v>
</v>
</v>
</v>
<v t="zoomq.20091204092707.5427"><vh>usageLeo</vh></v>
</v>
<v t="zoomq.20090312171356.20"><vh>triplemapping</vh>
<v t="zoomq.20100311095515.3578"><vh>@nosent readme.txt</vh>
<v t="zoomq.20100311095515.3582"><vh>需求</vh></v>
<v t="zoomq.20100311095515.3583"><vh>过程</vh></v>
</v>
<v t="zoomq.20090408143801.7"><vh>模板</vh>
<v t="zoomq.20090413195224.1"><vh>@nosent dotrelat.tpl</vh></v>
<v t="zoomq.20090409202326.2"><vh>@nosent dotnode.tpl</vh></v>
<v t="zoomq.20090409202326.1"><vh>@nosent dotmain.tpl</vh></v>
</v>
<v t="zoomq.20100311095515.4716"><vh>@nosent cfg.py</vh></v>
<v t="zoomq.20090409122718.2"><vh>@shadow triplemaper.py</vh></v>
<v t="zoomq.20090413151625.1"><vh>@shadow dot-gen-html.py</vh></v>
<v t="zoomq.20090408143801.4"><vh>support</vh>
<v t="zoomq.20090408143801.5"><vh>unitest</vh></v>
</v>
</v>
<v t="zoomq.20100311095515.4617"><vh>moinmaper</vh>
<v t="zoomq.20100311095515.4618"><vh>templets</vh>
<v t="zoomq.20100311095515.4619"><vh>@nosent moinxml.tpl</vh></v>
<v t="zoomq.20100311095515.4620"><vh>@nosent moindot.tpl</vh></v>
<v t="zoomq.20100311095515.4621"><vh>@nosent moinpage.tpl</vh></v>
<v t="zoomq.20100311095515.4622"><vh>@nosent moinmaper.tpl</vh></v>
</v>
<v t="zoomq.20100311095515.4623"><vh>@nosent cfg.py</vh></v>
<v t="zoomq.20100311095515.4624"><vh>@nosent freemind.xsl</vh>
<v t="zoomq.20100311095515.4625"><vh>&lt;&lt;annotations&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4626"><vh>&lt;&lt;xsl:template match="/"&gt;&gt;</vh>
<v t="zoomq.20100311095515.4627"><vh>&lt;&lt;h1&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4628"><vh>&lt;&lt;style&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4629"><vh>&lt;&lt;title&gt;&gt;</vh></v>
</v>
<v t="zoomq.20100311095515.4630"><vh>&lt;&lt;xsl:template match="node"&gt;&gt;</vh>
<v t="zoomq.20100311095515.4631"><vh>&lt;&lt;xsl:if test="node"&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4632"><vh>&lt;&lt;xsl:for-each select="arrowlink"&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4633"><vh>&lt;&lt;xsl:if test="@ID"&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4634"><vh>&lt;&lt;xsl:choose LINK&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4635"><vh>&lt;&lt;xsl:for-each select="icon"&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4636"><vh>&lt;&lt;xsl:choose cloud&gt;&gt;</vh>
<v t="zoomq.20100311095515.4637"><vh>if child nodes</vh></v>
</v>
</v>
</v>
<v t="zoomq.20100311095515.4638"><vh>@nosent moinmaper.py</vh>
<v t="zoomq.20100311095515.4639"><vh>&lt;&lt;define&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4640"><vh>&lt;&lt;__main__&gt;&gt;</vh>
<v t="zoomq.20100311095515.4641"><vh>try lxml</vh></v>
<v t="zoomq.20100311095515.4642"><vh>try dotmap</vh></v>
</v>
<v t="zoomq.20100311095515.4643"><vh>initlog</vh></v>
<v t="zoomq.20100311095515.4644"><vh>class mapper</vh>
<v t="zoomq.20100311095515.4645"><vh>__init__</vh>
<v t="zoomq.20100311095515.4646"><vh>abtFile</vh></v>
<v t="zoomq.20100311095515.4647"><vh>xmlfiles</vh></v>
</v>
<v t="zoomq.20100311095515.4648"><vh>mapxml</vh></v>
<v t="zoomq.20100311095515.4649"><vh>_lxmltree</vh>
<v t="zoomq.20100311095515.4650"><vh>mount son</vh>
<v t="zoomq.20100311095515.4651"><vh>&lt;&lt;try0&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4656"><vh>&lt;&lt;new node&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100311095515.4653"><vh>_mountson</vh>
<v t="zoomq.20100311095515.4656"></v>
</v>
<v t="zoomq.20100311095515.4655"><vh>_parentfix</vh>
<v t="zoomq.20100311095515.4656"></v>
</v>
<v t="zoomq.20100311095515.4657"><vh>mapall</vh></v>
<v t="zoomq.20100311095515.4658"><vh>urlanalyze</vh></v>
<v t="zoomq.20100311095515.4659"><vh>gen_dotmap</vh>
<v t="zoomq.20100311095515.4660"><vh>&lt;&lt;intermap&gt;&gt;</vh>
<v t="zoomq.20100311095515.4661"><vh>&lt;&lt;try mapping&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100311095515.4662"><vh>gen_dotitem</vh></v>
<v t="zoomq.20100311095515.4663"><vh>gen_lostnodes</vh></v>
<v t="zoomq.20100311095515.4664"><vh>_getitle</vh></v>
</v>
</v>
<v t="zoomq.20100311095515.4665"><vh>@nosent dot-gen-html.py</vh>
<v t="zoomq.20100311095515.4666"><vh>&lt;&lt;define&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4667"><vh>&lt;&lt;__main__&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4668"><vh>gen</vh></v>
</v>
<v t="zoomq.20100311095515.4669"><vh>moinutil</vh>
<v t="zoomq.20100311095515.4670"><vh>@nosent wikiutil.py</vh>
<v t="zoomq.20100311095515.4671"><vh>&lt;&lt;define&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4672"><vh>&lt;&lt;__main__&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4673"><vh>Getting data</vh>
<v t="zoomq.20100311095515.4674"><vh>decodeWindowsPath</vh></v>
<v t="zoomq.20100311095515.4675"><vh>decodeUnknownInput</vh></v>
<v t="zoomq.20100311095515.4676"><vh>decodeUserInput</vh></v>
<v t="zoomq.20100311095515.4677"><vh>url_quote</vh></v>
<v t="zoomq.20100311095515.4678"><vh>url_quote_plus</vh></v>
<v t="zoomq.20100311095515.4679"><vh>url_unquote</vh></v>
<v t="zoomq.20100311095515.4680"><vh>quoteWikinameURL</vh></v>
<v t="zoomq.20100311095515.4681"><vh>escape</vh></v>
</v>
<v t="zoomq.20100311095515.4682"><vh>Storage</vh>
<v t="zoomq.20100311095515.4683"><vh>quoteWikinameFS</vh></v>
<v t="zoomq.20100311095515.4684"><vh>unquoteWikiname</vh></v>
</v>
<v t="zoomq.20100311095515.4685"><vh>cjk_replace</vh></v>
</v>
<v t="zoomq.20100311095515.4686"><vh>@nosent Page.py</vh>
<v t="zoomq.20100311095515.4687"><vh>&lt;&lt;define&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4688"><vh>&lt;&lt;__main__&gt;&gt;</vh></v>
<v t="zoomq.20100311095515.4689"><vh>_setRealPageName</vh></v>
</v>
<v t="zoomq.20100311095515.4690"><vh>@nosent filesys.py</vh>
<v t="zoomq.20100311095515.4691"><vh>filesys declarations</vh></v>
<v t="zoomq.20100311095515.4692"><vh>chmod</vh></v>
<v t="zoomq.20100311095515.4693"><vh>rename</vh></v>
<v t="zoomq.20100311095515.4694"><vh>touch</vh></v>
<v t="zoomq.20100311095515.4695"><vh>access_denied_decorator</vh></v>
<v t="zoomq.20100311095515.4696"><vh>fuid</vh></v>
<v t="zoomq.20100311095515.4697"><vh>copystat</vh></v>
<v t="zoomq.20100311095515.4698"><vh>copytree</vh></v>
<v t="zoomq.20100311095515.4699"><vh>lock</vh></v>
<v t="zoomq.20100311095515.4700"><vh>unlock</vh></v>
<v t="zoomq.20100311095515.4701"><vh>dcdisable</vh></v>
<v t="zoomq.20100311095515.4702"><vh>dclistdir</vh></v>
<v t="zoomq.20100311095515.4703"><vh>dcreset</vh></v>
</v>
</v>
<v t="zoomq.20100311095515.4704"><vh>support</vh>
<v t="zoomq.20100311095515.4705"><vh>unitest</vh></v>
<v t="zoomq.20100311095515.4706"><vh>crontab</vh>
<v t="zoomq.20100311095515.4707"><vh>@nosent cron-moin-zq</vh></v>
<v t="zoomq.20100311095515.4708"><vh>@nosent moinpages.sh</vh>
<v t="zoomq.20100311095515.4709"><vh>&lt;&lt;define&gt;&gt;</vh></v>
</v>
<v t="zoomq.20100311095515.4710"><vh>@nosent cron-kup-zq</vh></v>
<v t="zoomq.20100311095515.4711"><vh>@nosent syncmoin.sh</vh>
<v t="zoomq.20100311095515.4712"><vh>&lt;&lt;define&gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20070628101624">@path adpvstats

for YKSEO:
    yseo6
    </t>
<t tx="zoomq.20070628101624.1">@path adpvstats/test

</t>
<t tx="zoomq.20070628101624.10"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
from operator import itemgetter

from pychartdir import *

from _cfg import *
from fnmatch import *

ADPA = {}
VERSION = "adpanalyzer_v1.4-070629@Zoom.Quiet"

''''adpanalyzer.py'
    v1.4 070629 for large analyzing rep doing...
    v1.3 070615 调整统计输出报表策略，以当日PV排序
    v1.2 070613 调整统计策略 区分对待 推广/广告
    v1.1 070522 追加总PV统计表输出在总历史趋势表中
    v1.0 070522 反转趋势图，为长期的记录作准备
    v0.9 070521 完成历史趋势图输出,并追加每日PV细则
    v0.8 070521 部署到BSD环境中，增加字体指定参数处理
    v0.7 070519 for 乐库SEO广告效益分析创建
    分析每日所有广告位效益，并积累汇报整体变迁趋势图表
    
    ADPA = {"广告位":{"uipcount":Uip总值
                ,"uiplist":[IP1,IP2,...]
                ,"pvcount":PV总值
                ,"pvsong":{"歌曲页面url":pv值}
             }
        ,..}
'''



</t>
<t tx="zoomq.20070628101624.11">def flushHistoric(tpl,exproot,cdrTitle):
    '''更新历史趋势表 乐库合作广告位PV/UIP收益历史趋势图
    '''
    myVer = VERSION
    repTitle = cdrTitle
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    historicDumps = filter(os.listdir(exproot),"*.dump")
    historicDumps.sort(reverse=True)
    adpHistoric = {"historicPV":[],"historicUIP":[],"historicDate":[],}
    
    &lt;&lt;monthlink&gt;&gt;
    &lt;&lt;PVdetail&gt;&gt;
    
    #data0 = [60.2, 51.7, 81.3, 48.6, 56.2, 68.9, 52.8]
    #data1 = [30.0, 32.7, 33.9, 29.5, 32.2, 28.4, 29.8]
    cdrData = [adpHistoric['historicPV'],adpHistoric['historicUIP']]
    labels = adpHistoric['historicDate']
    #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    
    #print cdrData
    imageMap = chartHistoric(defaultfont
        ,"%s" % cdrTitle
        ,"%s/adphistoric-all.png"%exproot
        ,cdrData
        ,labels
        ,"{value|0}")
        
    open("%s/index.html"%exproot,"w").write(open(tpl).read() % locals())
    #print imageMap
    
    print "%s histroic chart upgradED!" % creaTime


</t>
<t tx="zoomq.20070628101624.12">#zoomq::070611 add month state links
months = []
#dirwalk = os.walk(exproot)
for root, dirs, files in os.walk(exproot, topdown=False):
    #print root,dirs
    if root == exproot:
        for dir in dirs:
            if ".svn" in dir:
                pass
            else:
                months.append(dir)
    else:
        pass
#months = os.listdir(exproot)
print months
monthStatus = ""
for m in months:
    monthStatus += "&lt;a href='%s/index.html'&gt;%s 月度&lt;/a&gt;; " % (m,m)

print monthStatus
#return

</t>
<t tx="zoomq.20070628101624.13">#zoomq::070615 make date as X
pvDetails = ""
pvDetails += "&lt;tr&gt;&lt;td&gt;渠道|pv\日期&lt;/td&gt;"
#for url in adpoints.keys():
for d in historicDumps:
    pvDetails += "&lt;th&gt;%s&lt;/th&gt;" % d[-9:-5]
pvDetails += "&lt;/tr&gt;"

detailTab = {}
for d in historicDumps:
    adpaObj = pickle.load(open("%s/%s" % (exp,d)))
    print adpaObj['totPV'],adpaObj['totUIP']
    ##表格数据
    #pvDetails += "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;" % d[-11:-5]
    for url in adpoints.keys():
        if url in detailTab.keys():
            pass
        else:
            detailTab[url]=[]
        try:
            #pvDetails += "&lt;td&gt;%s&lt;/td&gt;" % adpaObj[url]["pvcount"]
            detailTab[url].append(adpaObj[url]["pvcount"])
        except:
            #pvDetails += "&lt;td&gt;-&lt;/td&gt;"
            detailTab[url].append(0)
    #pvDetails += "&lt;/tr&gt;"
    #detailTab[url].append("&lt;/tr&gt;")
    ##图表数据
    adpHistoric["historicPV"].append(adpaObj['totPV'])
    adpHistoric["historicUIP"].append(adpaObj['totUIP'])
    adpHistoric["historicDate"].append(d[-11:-5])
#print adpHistoric
#sorted(detailTab.iteritems(), key=itemgetter(1), reverse=True)
for k, v in sorted(detailTab.items()
    , key=lambda x: x[1][0]
    ,reverse=True):
    #print k,v 
    pvDetails += "&lt;tr&gt;&lt;th&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;&lt;/th&gt;" % (k,adpoints[k])
    pvDetails += "".join(["&lt;td&gt;%s&lt;/td&gt;" % i for i in v])
    pvDetails += "&lt;/tr&gt;"

#for adp in  detailTab.keys():


</t>
<t tx="zoomq.20070628101624.14">#zoomq::070522 22:00 追加pv 统计细目
pvDetails = ""
pvDetails += "&lt;tr&gt;&lt;th&gt;|pv\Date&lt;/th&gt;"
for url in adpoints.keys():
    pvDetails += "&lt;th&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;&lt;/th&gt;" % (url,adpoints[url])
pvDetails += "&lt;/tr&gt;"
for d in historicDumps:
    adpaObj = pickle.load(open("%s/%s" % (exp,d)))
    print adpaObj['totPV'],adpaObj['totUIP']
    ##表格数据
    #print adpoints.keys()
    #print adpaObj.keys()
    pvDetails += "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;" % d[-11:-5]
    for url in adpoints.keys():
        try:
            pvDetails += "&lt;td&gt;%s&lt;/td&gt;" % adpaObj[url]["pvcount"]
        except:
            pvDetails += "&lt;td&gt;-&lt;/td&gt;"
    pvDetails += "&lt;/tr&gt;"
    ##图表数据
    #print d[-11:-5]
    adpHistoric["historicPV"].append(adpaObj['totPV'])
    adpHistoric["historicUIP"].append(adpaObj['totUIP'])
    adpHistoric["historicDate"].append(d[-11:-5])
#print adpHistoric

</t>
<t tx="zoomq.20070628101624.15">def adpAmount(key,count,refer,uip,song):
    '''合算计算累加处理对应广告位信息:
        - key   广告位特征URL
        - count 日志统计数量
        - refer 引用地址
        - uip   用户IP
        - song  目标歌曲
        ADPA[key] = {"uipcount":0,"uiplist":[],"pvcount":0,"pvsong":{}}
    '''
    ## UIP 统计
    if uip in ADPA[key]["uiplist"]:
        pass
    else:
        ADPA[key]["uiplist"].append(uip)
        ADPA[key]["uipcount"]+=1
    ## pv 统计
    ADPA[key]["pvcount"]+= int(count)
    if song in ADPA[key]["pvsong"].keys():
        ADPA[key]["pvsong"][song]+=int(count)
    else:
        ADPA[key]["pvsong"][song] =int(count)


</t>
<t tx="zoomq.20070628101624.16">def adpDaily(logf):
    '''日广告位PV分析
        - in filter log 
            awk '{ print $4,$12,$1,$8,$10 }'
                =&gt; time refer ip url state
            after sort
                =&gt; count time refer ip url state
    '''
    print "adpoint daily analyzing..."
    exp = ""
    log = open(logf).readlines()    
    loop = 20000
    countloop = 0
    print "start analyzed %s PVs"%len(log) 
    for line in log:
        if 0==loop:
            countloop +=1
            print "&gt;&gt;&gt; chked %d * 20k PVs! &lt;&lt;&lt;" % countloop
            loop = 20000
        else:
            loop -=1
        logl = line.split()
        count,refer,uip,song = logl[0],logl[1],logl[2],logl[3]
        #print count,refer,uip,song
        matched = 0
        ## alert kkton not all come from refer
        for key in adpoints.keys():
            if key in refer:
                matched = 1
                if key in ADPA.keys():
                    #print count,refer
                    adpAmount(key,count,refer,uip,song.split("?")[0])
                    #pass
                else:
                    ADPA[key] = {"uipcount":0,"uiplist":[],"pvcount":0,"pvsong":{}}
            else:
                pass
    print "analyzed all %s PV items"%len(log)
    
    '''
        if 0==matched:
            print song,refer
            exp += "%s    %s\n" % (song,refer)
    open("nomatched.log","w").write(exp)
    '''
    return exp


</t>
<t tx="zoomq.20070628101624.17">def drawDailyPie(defaultfont,tonow):
    """每日统计图表输出
    """
    print "draw DailyPie chart for PV/UIP ..."
    totPV = 0
    totUIP = 0
    ### PV图表
    data = []
    labels = []
    for key in ADPA.keys():
        #labels.append(adpoints[key])
        data.append(ADPA[key]["pvcount"])    
        totPV += ADPA[key]["pvcount"]
    data.sort()
    for d in data:
        for key in ADPA.keys():
            if ADPA[key]["pvcount"]==d:
                labels.append(adpoints[key])
                break
            else:
                pass
    chartDadp(defaultfont
        ,"%s 推广合作PV收益分析"%tonow
        ,"%s/yueku-adpv-%s.png"% (exp,tonow)
        ,data
        ,labels
        ,"{label}({percent}%) pv:{value}")
    ### UIP图表
    data=[]
    labels=[]
    for key in ADPA.keys():
        #labels.append(adpoints[key])
        data.append(ADPA[key]["uipcount"])
        totUIP += ADPA[key]["uipcount"]
    data.sort()
    for u in data:
        for key in ADPA.keys():
            if ADPA[key]["uipcount"]==u:
                labels.append(adpoints[key])
                break
            else:
                pass
    chartDadp(defaultfont
        ,"%s 推广合作UIP收益分析"%tonow
        ,"%s/yueku-aduip-%s.png"% (exp,tonow)
        ,data
        ,labels
        ,"{label}({percent}%) {value}人")    
    ADPA['totPV'] = totPV
    ADPA['totUIP'] = totUIP


</t>
<t tx="zoomq.20070628101624.18">def repAll(tpl,exrep,exproot,tonow,repdata=0):
    """HTML报告页面输出函式
    """
    myVer = VERSION
    print "rporting as HTML ..."
    if 0 == repdata:
        #没有直接传入对象,需要从dump文件提取
        dumpf = "%s/yueku-adaily-%s.dump" % (exproot,tonow)
        adpaObj = pickle.load(open(dumpf))
    else:
        adpaObj = repdata
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    repTitle = "乐库推广合作PV/UIP收益分析 %s" % tonow       
    sumPV = adpaObj['totPV']
    sumUIP = adpaObj['totUIP'] 
    
    ## top3 歌曲细则
    print "songDetail into HTML ..."    
    songDetail = ""
    songPVs = []
    pvCount = []
    for adp in adpaObj:
        if ("totUIP"==adp or "totPV"==adp):
            pass
        else:
            pvCount.append(adpaObj[adp]['pvcount'])
    pvCount.sort()
    topSong = pvCount[-10:]
    topSong.reverse()
    print topSong
    for top in topSong:        
        for adp in adpaObj:
            if ("totUIP"==adp or "totPV"==adp):
                pass
            else:
                if top==adpaObj[adp]['pvcount']:
                    #crTopv = []
                    songDetail +="""&lt;td style='vertical-align: top'&gt;
                        &lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;&lt;/b&gt;
                        &lt;br/&gt; (总PV:%s)
                        &lt;sup&gt;细目::&lt;/sup&gt;
                            &lt;ul&gt;
                        """% (adp,adpoints[adp],top)
                    #print len(adpaObj[adp]['pvsong'].keys())
                    for k, v in sorted(adpaObj[adp]['pvsong'].items(), key=lambda x: x[1],reverse=True):
                        #print k,v
                        songDetail +="""
                        &lt;li&gt;%s::
                            &lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
                            &lt;/li&gt;"""%(v,k,k[:12])
                    #l = sorted(adpaObj[adp]['pvsong'].items(), key=lambda x: x[1],reverse=True)
                    #print len(l)
                    songDetail +="&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;"
    open(exrep,"w").write(open(tpl).read() % locals())
    print "%s all daily analyzing DONE! export dialy analyzeing page " % creaTime


</t>
<t tx="zoomq.20070628101624.19">def chartDadp(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 饼图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    depths = [3*i for i in range(1,len(cdrData)+1)]
    #xihei = defaultfont     #'/usr/share/fonts/MacFonts/stxihei.ttf'
    # Create a PieChart object of size 560 x 270 pixels, with a golden background and a 1 pixel 3D border
    #c = PieChart(560, 270, goldColor(), -1, 1)
    c = PieChart(480, 400, metalColor(0xccccff, 0), 0x778877, 1)
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    c.addTitle(cdrTitle,defaultfont, 14).setBackground(0xccccff, 0x000000, glassEffect())
    #.setBackground(metalColor(0xff9999))
    # Set the center of the pie at (280, 135) and the radius to 110 pixels
    c.setPieSize(240, 210, 70)
    #c.set3D(20)
    c.set3D2(depths)
    ## 透明分块
    c.setColors(transparentPalette)
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    # Use the side label layout method
    c.setLabelLayout(SideLayout)
    c.setLabelFormat(labelFormat)     #"{label}({percent}%) pv:{value}"
    #t.setBackground(SameAsMainColor, Transparent, glassEffect())
    t = c.setLabelStyle()
    t.setRoundedCorners(5)
    # Set the border color of the sector the same color as the fill color. Set the line
    # color of the join line to black (0x0)
    c.setLineColor(SameAsMainColor, 0x000000)
    c.setStartAngle(135)
    c.setData(cdrData, cdrLabels)
    # output the chart
    c.makeChart(cdrPNG)

</t>
<t tx="zoomq.20070628101624.2">@others

if __name__ == '__main__':      # this way the module can be
    add2(1,1.1)
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20070628101624.20">def chartHistoric(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    #depths = [3*i for i in range(1,len(cdrData)+1)]
    # The data for the line chart
    data0 = cdrData[0]  #[60.2, 51.7, 81.3, 48.6, 56.2, 68.9, 52.8]
    data1 = cdrData[1]  #[30.0, 32.7, 33.9, 29.5, 32.2, 28.4, 29.8]
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    # Create a XYChart object of size 300 x 180 pixels, with a pale yellow (0xffffc0)
    # background, a black border, and 1 pixel 3D border effect.
    cwidth = 100+len(data0)*38
    pwidth = len(data0)*36
    cheight = 100+len(data0)*15
    pheight = len(data0)*15
    #c = XYChart(cwidth,250, 0xffffc0, 0x000000, 1)
    c = XYChart(240,cheight, 0xffffc0, 0x000000, 1)
    c.swapXY()
    c.setYAxisOnRight()
    
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    # Set the plotarea at (45, 35) and of size 240 x 120 pixels, with white background.
    # Turn on both horizontal and vertical grid lines with light grey color (0xc0c0c0)
    #c.setPlotArea(60, 60, pwidth, 140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60, 60, 140,pheight, 0xffffff, -1, -1, 0xc0c0c0, -1)
    
    # Add a legend box at (45, 12) (top of the chart) using horizontal layout and 8 pts
    # Arial font Set the background and border color to Transparent.
    c.addLegend(90, 20, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")

    # Set the labels on the x axis
    c.xAxis().setLabels(labels)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(2)
    c.yAxis().setWidth(2)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(2)
    # Add the first line. Plot the points with a 7 pixel square symbol
    layer.addDataSet(data0, 0xcf4040, "PV").setDataSymbol(CircleSymbol, 9,0xffff00)
    # Add the second line. Plot the points with a 9 pixel dismond symbol
    layer.addDataSet(data1, 0x40cf40, "UIP").setDataSymbol(DiamondSymbol, 9)

    # Enable data label on the data points. Set the label format to nn%.
    #layer.setDataLabelFormat(labelFormat) #"{value|0}"    
    #layer.setDataLabelStyle(defaultfont, 8, 0x334433).setFontAngle(45)
    
    # output the chart
    c.makeChart(cdrPNG)
    ## 输出可点击区域定义
    imageMap = c.getHTMLImageMap("yueku-adaily-{xLabel}.html"
        , ""
        , "title='{xLabel}:: {value|0} '")
    return imageMap
</t>
<t tx="zoomq.20070628101624.21">@path adpvstats/yseo6/
</t>
<t tx="zoomq.20070628101624.22">#tpl for creat shell for analyze one by one log files
running for filter all need data:
awk '{ print $4,$12,$1,$8,$10 }'

[11/Jun/2007:00:07:53 "http://chat.sina.com.cn/homepage/6/2007/0406/17.html" 221.224.59.38 /yueku/UC070406.html 304

base time not need uniq:
    
    | $cmdUniq -c | $cmdSort -gr
    cancel
    
    $cmdSort -bdi -k 1 -o %(exportPath)s/adP%(datePoint)s_%(historicHost)s.sort
</t>
<t tx="zoomq.20070628101624.23">#!/bin/bash

## zoomq::070628 merge all CASE for ykstate upgrade
## zoomq::070612 append kktone support
## zoomq::070523 creat for larget sort in analyzing YueKu apache log

version="yseo6_adpanalyzer v1.0 070628"

cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

#logroot="/data0/mupopro/logs/music_sina_com_cn/$today"
#statsroot="/data0/mupopro/logs/searchKeyAnalyzer"
#yseoRoot="%(yseoRoot)s"

echo "$version ::auto STATS YueKu runing log for yseo6..."

%(ShellFitler)s

echo "OK i will merger all sort tmp files :: \n\n %(SortedFiles)s \n\nand sort and uniq for Python analzying ..."
%(SortedMerg)s

echo "$version ::i done all!\n\n pls going Python script export report HTML page..."

echo
exit  0

</t>
<t tx="zoomq.20070628101624.24">echo "try to filting the %(historicLog)s and sort into tmp file..."
echo 
echo "base PV filting:egrep -v '(.js|.css|.ico|.swf|.png|.PNG|.bmp|.gif|.GIF|.jpg|.JPG|dpool_check.php|/collect/collectsong.php|drm.php|playlist.php|/list/iaskplaylist.php|/new/index.html|main.html|copy.html|head.html|head_tc.html|/119/2007/0521/1.html|chat.sina.com.cn|/shequ/port/|/shequ/ssi/|/shequ/tpl/)'cut most kinds of invalidity PV"
echo
$cmdZcat %(logBasePath)s/%(datePoint)s/%(historicLog)s | \
    $cmdAwk '{ print $4,$12,$1,$8,$10 }' | \
    $cmdSed 's/\"//g' | \
    $cmdEGrep -v "(.js|.css|.ico|.swf|.png|.PNG|.bmp|.gif|.GIF|.jpg|.JPG|dpool_check.php|/collect/collectlist.php|/collect/collectsong.php|drm.php|playlist.php|/list/iaskplaylist.php|/new/index.html|main.html|copy.html|head.html|head_tc.html|/119/2007/0521/1.html|chat.sina.com.cn|/shequ/port/|/shequ/ssi/|/shequ/tpl/)" &gt; %(exportPath)s/adP%(datePoint)s_%(historicHost)s.sort
</t>
<t tx="zoomq.20070628101624.25">$cmdSort -sm %(SortedFiles)s &gt; %(exportPath)s/adPoint%(datePoint)s.log

</t>
<t tx="zoomq.20070628101624.26"># -*- coding: utf-8 -*-

''''yseo6_adpLogShell.py'
    v0.8 070524 完成并部署运行
    v0.7 070523 为提高日志分析的效率，使用py 生成对应shell 脚本再运行!
'''
import os,sys,time,datetime
from fnmatch import *

VERSION = "yseo6_adpLogShell v0.8_070524"

if __name__ == '__main__':      # this way the module can be
    if 4 != len(sys.argv):
        print """yseo6_adpLogShell.py usage::
        $ python yseo6_adpLogShell.py logBasePath datePoint exportPath
        """
    else:
        logBasePath = sys.argv[1]
        datePoint = sys.argv[2]
        exportPath = sys.argv[3]

        #yseoRoot = "/home/zoomq/workspace/mu_tangle_ZoomQuiet/YKSEO/olink_ad_point"
        yseoRoot = "/home/zoomq/run_yueku_logs" # for running 70-59
        
        historicLogs = filter(os.listdir("%s/%s"%(logBasePath,datePoint)),"*.gz")
        #print historicLogs
        ShellFitler = ""
        SortedFiles = ""
        for h in historicLogs:
            historicLog = h
            historicHost = h[-10:-6]
            ShellFitler += "\n\n"+open('yseo6_adpanalyzer.filter.tpl').read() % locals()
            SortedFiles += " '%(exportPath)s/adP%(datePoint)s_%(historicHost)s.sort'" % locals()

        SortedMerg = "\n\n"+open('yseo6_adpanalyzer.sort.tpl').read() % locals()
        #print SortedMerg
        
        open("yseo6_adpanalyzer_%s.sh"%datePoint,"w"
            ).write(open("yseo6_adpanalyzer.sh.tpl").read() % locals())
    print "done! u can runing the yseo6_adpanalyzer_*.sh to do all next..."


</t>
<t tx="zoomq.20070628101624.27">#!/bin/bash
#
# zoomq::070629 fixed for 131 updated 1st filte 
# zoomq::070523 creat for larget sort in analyzing YueKu apache log
version="zipadplog v0.8-070629"

cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdCat=$( which cat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

#logroot="/data0/mupopro/logs/music_sina_com_cn/$today"
#statsroot="/data0/mupopro/logs/searchKeyAnalyzer"
#yseoRoot="%(yseoRoot)s"

echo "$version ::auto zip YueKu runing 'analyzed' log for yseo6..."

echo "hold enter var::$1"

# 4 analyz Chart as ...
#    egrep -v " http://music.sina.com.cn/yueku" | \
$cmdCat $1 | \
    $cmdEGrep -v "sms" | \
    $cmdEGrep -v " /yueku/playlog.php" | \
    $cmdEGrep -v " /yueku/port/" | \
    $cmdEGrep -v " /iframe/yueku/" | \
    $cmdEGrep -v " /yueku/rank/" | \
    $cmdEGrep -v " /yueku/search/" | \
    $cmdEGrep -v " /yueku/UC" | \
    $cmdEGrep -v " - " | \
    $cmdSort -bdi -k 1 | \
    $cmdUniq -c | $cmdSort -gr &gt; ziped-$1

#    egrep -v ".swf" | \
#    egrep -v " /yueku/playlist.php" | \
#    egrep -v " /yueku/port/" | \
#    egrep -v " /iframe/yueku/" | \
#    egrep -v " /yueku/drm.php" | \
#    egrep -v " /yueku/rank/" | \
#    egrep -v " /yueku/search/" | \
#    egrep -v " /yueku/UC070406.html" | \
#    egrep -v " /yueku/playlog.php" | \

echo "$version ::i done all! pls going Python script export report HTML page..."

echo
exit  0

</t>
<t tx="zoomq.20070628101624.28">@path adpvstats/pvlosting/
</t>
<t tx="zoomq.20070628101624.29">&lt;&lt; declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    logpath = "../runYueKuReports"
    armpath = "pvlosting"
    klost = flushHisAll(logpath,armpath)
    clost = flushHisCnt(logpath,armpath)
    mergeKey(klost,clost)
    print "Mnnnn export all that report!!!!"
    
</t>
<t tx="zoomq.20070628101624.3">
def add2(one,two):
    print float(one+two)
    return float(one+two)


</t>
<t tx="zoomq.20070628101624.30"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
#from pychartdir import *
#from _cfg import *
from fnmatch import *

ADPA = {}
VERSION = "urgencyAnalyzer v0.8 070612"


</t>
<t tx="zoomq.20070628101624.31">def mergeKey(klost,clost):
    '''070612 紧急分析PV流失关键问题
    '''
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    
    yester = klost['070611']['html']+clost['070611']['html']
    layester = klost['070610']['html']+clost['070610']['html']
    llyester = klost['070609']['html']+clost['070609']['html']
    
    open('urgencylosted.html'
        ,"w").write(open('urgency-analyze.tpl').read() % locals())
    print 'urgencylosted.html exported!'



</t>
<t tx="zoomq.20070628101624.32">def flushHisCnt(logpath,armpath):
    '''070612 紧急分析内容页面趋势
    '''
    pvcount = {
        '070609':{"html":""
            ,"yueku.a":0,"yueku.v":0,"yueku.m":0,"yueku.s":0,"yueku.root":0}
        ,'070610':{"html":""
            ,"yueku.a":0,"yueku.v":0,"yueku.m":0,"yueku.s":0,"yueku.root":0}
        ,'070611':{"html":""
            ,"yueku.a":0,"yueku.v":0,"yueku.m":0,"yueku.s":0,"yueku.root":0}
        }
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    #historicDumps.sort(reverse=True)
    historicTotle = filter(os.listdir(logpath),"*.pvt")
    &lt;&lt;countPV&gt;&gt;
    
    historicSort = filter(os.listdir(logpath),"*.sortc")
    yester = ""
    layester = ""
    llyester = ""
    for sortf in historicSort:
        print "doing %s..." % sortf
        for day in pvcount.keys():
            if day in sortf:
                #print open("%s/%s"%(exproot,sort) ).readlines(3)
                &lt;&lt;expHTML&gt;&gt;
    yester = pvcount['070611']['html']
    layester = pvcount['070610']['html']
    llyester = pvcount['070609']['html']
    
    #open('urgencylostingc.html'
    #    ,"w").write(open('urgency-analyze.tpl').read() % locals())
    print '%s/urgencycontent.html exported!'% armpath 
    return pvcount



</t>
<t tx="zoomq.20070628101624.33">for tot in historicTotle:
    print tot
    for day in pvcount.keys():
        if day in tot:
            for type in pvcount[day].keys():
                if type in tot:
                    totle = open("%s/%s"%(logpath,tot)).read()
                    print "totle PV::%s" % totle
                    pvcount[day][type] = totle
print pvcount

</t>
<t tx="zoomq.20070628101624.34">pvcount[day]['html'] += '''&lt;tr style='background-color:#dedede'&gt;
    &lt;th&gt; PV &lt;/th&gt; 
    &lt;th&gt;url &lt;sup&gt;refer&lt;/sup&gt;&lt;/tr&gt;'''

lines = open("%s/%s"%(logpath,sortf) ).readlines()
#totle = len(lines)

for kpath in pvcount[day].keys():
    if kpath in sortf:
        #pvcount[day][kpath] = totle
        pvcount[day]['html'] += """&lt;tr style='background-color:#ffffff'&gt;
        &lt;td&gt;&lt;i&gt; top5 &lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;b&gt; /%s 总计:: %s &lt;/th&gt;&lt;/b&gt;
        &lt;/tr&gt;"""%(sortf[6:-6].replace(".","/"),pvcount[day][kpath])

#print pvcount[day]['html']

for line in lines[:10]:
    ele = line.split()
    try:
        pvcount[day]['html'] += '''&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;
            &lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt; 
            &lt;sup&gt;&lt;a href='%s'&gt;..%s&lt;/a&gt;&lt;/sup&gt;
            &lt;/td&gt;&lt;/tr&gt;''' % (
                ele[0],ele[1],ele[1][:12]
                ,ele[2],ele[2][-12:])
    except:
        pvcount[day]['html'] += '''&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;
            &lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
            &lt;/td&gt;&lt;/tr&gt;''' % (ele[0],ele[1],ele[1][:12])



</t>
<t tx="zoomq.20070628101624.35">def flushHisAll(logpath,armpath):
    '''070612 紧急分析
    '''
    #timekey = {'070609':"",'070610':"",'070611':""}
    pvcount = {
        '070609':{"html":""
            ,"m.php":0,"yueku.m":0,"keypages":0}
        ,'070610':{"html":""
            ,"m.php":0,"yueku.m":0,"keypages":0}
        ,'070611':{"html":""
            ,"m.php":0,"yueku.m":0,"keypages":0}
            }
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    #historicDumps.sort(reverse=True)
    historicCount = filter(os.listdir(logpath),"*.txt")
    &lt;&lt;countPV&gt;&gt;
    historicDumps = filter(os.listdir(logpath),"*.sort")
    yester = ""
    layester = ""
    llyester = ""
    print  historicDumps
    for sort in historicDumps:
        for day in pvcount.keys():
            if day in sort:
                #print open("%s/%s"%(exproot,sort) ).readlines(3)
                &lt;&lt;expHTML&gt;&gt;
                
            else:
                pass
    yester = pvcount['070611']['html']
    layester = pvcount['070610']['html']
    llyester = pvcount['070609']['html']
    
    #open('urgencylosting.html'
    #    ,"w").write(open('urgency-analyze.tpl').read() % locals())
    print '%s/urgencyanalyze.html exported!'% armpath 
    return pvcount




</t>
<t tx="zoomq.20070628101624.36">for c in historicCount:
    print c
    for day in pvcount.keys():
        if day in c:
            for type in pvcount[day].keys():
                if type in c:
                    pvcount[day][type] = open("%s/%s"%(logpath,c)).read()
        else:
            # not time march
            pass

print pvcount

</t>
<t tx="zoomq.20070628101624.37">lines = open("%s/%s"%(logpath,sort) ).readlines()[:10]
#print "".join(["&lt;tr&gt;&lt;td&gt;%s %s&lt;/td&gt;&lt;/tr&gt;"%(line.split()[0],line.split()[1])  for line in lines[3] ] )

pvcount[day]['html'] += "&lt;tr style='background-color:#dedede'&gt;&lt;th&gt; PV &lt;/th&gt; &lt;th&gt;url &lt;sup&gt;refer&lt;/sup&gt;&lt;/tr&gt;&lt;/tr&gt;"

for type in pvcount[day].keys():
    if type in sort:
        pvcount[day]['html'] += "&lt;tr style='background-color:#ffffff'&gt;&lt;td&gt;&lt;b&gt; %s &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;总计 %s &lt;/th&gt;&lt;/b&gt;&lt;/tr&gt;"%(pvcount[day][type],sort[:-5])
for line in lines:
    ele = line.split()
    if 2&lt;len(ele):
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;
                &lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
                &lt;sup&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;...&lt;sup&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                ,ele[2],ele[2][-12:])
    else:
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                )


</t>
<t tx="zoomq.20070628101624.38">@path adpvstats/play50top/
</t>
<t tx="zoomq.20070628101624.39">&lt;&lt; declarations &gt;&gt;
VERSION = "urgencyToPlay v0.7 070622"

@others

if __name__ == '__main__':      # this way the module can be
    logpath = "../runYueKuReports"
    armpath = logpath #"pvlosting"
    &lt;&lt;abtDB&gt;&gt;
    flushHisPlay(logpath,armpath)
    
    print "Mnnnn export all that report!!!!"
    
</t>
<t tx="zoomq.20070628101624.40"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
#from pychartdir import *
#from _cfg import *
from fnmatch import *
import adodb




</t>
<t tx="zoomq.20070628101624.41">
dbhost = "10.210.70.62" #"10.210.70.57"#"localhost"
dbname = "MusicLibrary"
dbuser = "zoomq"
dbpasswd = "ykse01q2w3e"
conn = adodb.NewADOConnection('mysql')
#print self.conn
#conn.Connect('server', 'user', 'pwd', 'db')
conn.Connect(dbhost
    ,dbuser
    ,dbpasswd
    ,dbname)
# for unicode read
conn.Execute("set names 'utf8' ;")

sql = "SELECT Name FROM `Song` WHERE SongID=%s ;"


</t>
<t tx="zoomq.20070628101624.42">def flushHisPlay(logpath,armpath):
    '''070612 紧急分析,play top 50
    '''
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    bgMark = 989998
    
    logMark = "*-play-top50.txt"
    repTpl = 'toplay.tpl'
    expRep = "%s/urgencyToPlay.html"%armpath
    urlSong = "http://music.sina.com.cn/yueku/m/%s.html"
    listTpl = """&lt;th style='vertical-align: top;background-color:#%(bgMark)s;'&gt;
%(today)s &lt;br/&gt;
&lt;table id="pvDetails"&gt;&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;&lt;td&gt;times&lt;/td&gt;&lt;td&gt;song&lt;/td&gt;
&lt;/tr&gt;
%(toplays)s
&lt;/table&gt;&lt;/th&gt;
    """
    playTpl = """&lt;tr&gt;
&lt;th&gt;%s&lt;/th&gt;&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;&lt;a href='http://music.sina.com.cn/yueku/m/%s.html'&gt;%s&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    """
    #historicDumps.sort(reverse=True)
    historicCount = filter(os.listdir(logpath),logMark)

    &lt;&lt;countPV&gt;&gt;

    open(expRep,"w").write(open(repTpl).read() % locals())

    print '%s/%s exported!'% (armpath ,expRep)
    #return pvcount




</t>
<t tx="zoomq.20070628101624.43">print historicCount
#log = "%s/%s" % (logpath,historicCount[0])

daytoplays = ""
colorseed = 9
for logf in historicCount:
    log = "%s/%s" % (logpath,logf)
    today = logf[:4]
    order = 0    
    toplays = ""
    for p in open(log).readlines():
        order +=1
        #print sql % p.split()[1]
        #print conn.GetOne(sql % p.split()[1])
        toplays += playTpl % (order
            ,p.split()[0]
            ,p.split()[1]
            ,conn.GetOne(sql % p.split()[1]))
    #bgMark = ("%sf"%colorseed)*3
    daytoplays +=listTpl % locals()
    bgMark -= 111
    print bgMark
    print "rep DONE 4 logf"

    
'''
for c in historicCount:
    print c
    for day in pvcount.keys():
        if day in c:
            for type in pvcount[day].keys():
                if type in c:
                    pvcount[day][type] = open("%s/%s"%(logpath,c)).read()
        else:
            # not time march
            pass

print pvcount
'''

</t>
<t tx="zoomq.20070628101624.44">lines = open("%s/%s"%(logpath,sort) ).readlines()[:10]
#print "".join(["&lt;tr&gt;&lt;td&gt;%s %s&lt;/td&gt;&lt;/tr&gt;"%(line.split()[0],line.split()[1])  for line in lines[3] ] )

pvcount[day]['html'] += "&lt;tr style='background-color:#dedede'&gt;&lt;th&gt; PV &lt;/th&gt; &lt;th&gt;url &lt;sup&gt;refer&lt;/sup&gt;&lt;/tr&gt;&lt;/tr&gt;"

for type in pvcount[day].keys():
    if type in sort:
        pvcount[day]['html'] += "&lt;tr style='background-color:#ffffff'&gt;&lt;td&gt;&lt;b&gt; %s &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;总计 %s &lt;/th&gt;&lt;/b&gt;&lt;/tr&gt;"%(pvcount[day][type],sort[:-5])
for line in lines:
    ele = line.split()
    if 2&lt;len(ele):
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;
                &lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
                &lt;sup&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;...&lt;sup&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                ,ele[2],ele[2][-12:])
    else:
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                )


</t>
<t tx="zoomq.20070628101624.5">export HTML's .tpl</t>
<t tx="zoomq.20070628101624.6">&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"&gt;
    &lt;title&gt;%(repTitle)s&lt;/title&gt;	
&lt;/head&gt;

&lt;body&gt;
&lt;style type="text/css"&gt;
ul li{
	color: #343;
    font-size: 10.5px; 
}
&lt;/style&gt;
    &lt;h3&gt;乐库推广/广告位PV/UID收益每日统计
    &lt;sup&gt; %(myVer)s &lt;/sup&gt;
    &lt;sub&gt; %(creaTime)s 生成 &lt;/sub&gt;
    &lt;sup&gt; 返回&lt;a href="index.html"&gt;历史分析总图&lt;/a&gt; &lt;/sup&gt;
    &lt;/h3&gt;

    &lt;table&gt;

    &lt;tr&gt;
        &lt;th&gt;总PV收益:%(sumPV)s &lt;/th&gt;
        &lt;th&gt;总UID收益:%(sumUIP)s &lt;/th&gt;    
    &lt;tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;img src="yueku-adpv-%(tonow)s.png"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src="yueku-aduip-%(tonow)s.png"/&gt;&lt;/td&gt;
    &lt;tr&gt;
    &lt;/table&gt;
&lt;b&gt;Top10 PV贡献细则::&lt;/b&gt;
&lt;table&gt;
    &lt;tr&gt;
%(songDetail)s
    &lt;tr&gt;
&lt;/table&gt;


&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20070628101624.7">&lt;html&gt;

&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"&gt;
    &lt;title&gt;%(repTitle)s&lt;/title&gt;
&lt;/head&gt;
&lt;body topmargin="5" leftmargin="5" rightmargin="0" marginwidth="5" marginheight="5"&gt;
&lt;style type="text/css"&gt;
th {
	color: #343;
    font-size: 12px; 
}
th a{
	color: #454;
    font-size: 11px; 
}
table#pvDetails td{
	color: #434;    
    font-size: 10.5px;
    border-bottom: 1px solid #dcd; 
    border-right: 1px solid #cdc; 
}
table#pvDetails th{
    font-size: 11px;
    border: 1px dotted #cbc;
}

&lt;/style&gt;
&lt;table border="0" CELLSPACING="0"&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;h3&gt;乐库推广/广告位PV/UIP收益统计
    &lt;/h3&gt;
&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
月度数据:%(monthStatus)s
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;sup&gt;&lt;i&gt;可点击各数据节进入详细分析图表！&lt;i&gt;&lt;/sup&gt;&lt;br/&gt;
        &lt;img src="adphistoric-all.png" border="0" usemap="#mapHistoric"/&gt;
        &lt;hr/&gt;
&lt;sub&gt;数值若出现陡峭变化现象，
&lt;br/&gt;可能在进行统计程序的调整，
&lt;br/&gt;请与周琦(5528)联系询问&lt;/sub&gt;

&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;b&gt;推广/广告位PV收益统计表&lt;/b&gt;
    &lt;sub&gt;%(myVer)s &lt;/sub&gt;
&lt;sup&gt; %(creaTime)s 生成  &lt;/sup&gt;

&lt;table id="pvDetails" border="0" CELLSPACING="0"&gt;
%(pvDetails)s
&lt;/table&gt;    
&lt;/td&gt;
&lt;/tr&gt;
&lt;table&gt;

    &lt;map name="mapHistoric"&gt;
    %(imageMap)s
    &lt;/map&gt;

&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20070628101624.8">&lt;html&gt;

&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"&gt;
    &lt;title&gt;%(repTitle)s&lt;/title&gt;
&lt;/head&gt;
&lt;body topmargin="5" leftmargin="5" rightmargin="0" marginwidth="5" marginheight="5"&gt;
&lt;style type="text/css"&gt;
th {
	color: #343;
    font-size: 12px; 
}
th a{
	color: #454;
    font-size: 11px; 
}
table#pvDetails td{
	color: #434;    
    font-size: 10.5px;
    border-bottom: 1px solid #dcd; 
    border-right: 1px solid #cdc; 
}

table#pvDetails th{
    font-size: 11px;
    border: 1px dotted #cbc;
}

&lt;/style&gt;
&lt;table border="0" CELLSPACING="0"&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;h3&gt;乐库推广/广告位PV/UIP收益统计
    &lt;/h3&gt;
&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;a href="../index.html"&gt;返回当月收益统计&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;sup&gt;&lt;i&gt;可点击各数据节进入详细分析图表！&lt;i&gt;&lt;/sup&gt;&lt;br/&gt;
        &lt;img src="adphistoric-all.png" border="0" usemap="#mapHistoric"/&gt;
&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;b&gt;推广/广告位PV收益统计表&lt;/b&gt;
    &lt;sub&gt;%(myVer)s &lt;/sub&gt;
&lt;sup&gt; %(creaTime)s 生成  &lt;/sup&gt;


&lt;table id="pvDetails" border="1"&gt;
%(pvDetails)s
&lt;/table&gt;    
&lt;/td&gt;
&lt;/tr&gt;
&lt;table&gt;

    &lt;map name="mapHistoric"&gt;
    %(imageMap)s
    &lt;/map&gt;

&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20070628101624.9">&lt;&lt; adpanalyzer declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python adpanalyzer.py 'path/to/stxihei.ttf' datePoint [like 070501]
        """ % VERSION
    else:
        defaultfont = sys.argv[1]           #[-10:-4]    print tonow
        tonow = sys.argv[2]                 #[-10:-4]    print tonow
        log = 'analyzed/ziped-adPoint%s.log'%tonow
        print "tyr to analyzing and chart daily log ::%s"%log
        exp = "exp"         #/home/zoomq/workspace/mu_tangle_ZoomQuiet/YKSEO/    
        dailyDump = "%s/yueku-adaily-%s.dump" % (exp,tonow)
        dailyTpl = 'adp_dailyrep.tpl'
        historicTpl = 'adp_historic.tpl'
        dailyRep = "%s/yueku-adaily-%s.html" % (exp,tonow)        
        
        adpDaily(log)
        drawDailyPie(defaultfont,tonow)
        pickle.dump(ADPA,open(dailyDump,"w"))
        repAll(dailyTpl,dailyRep,exp,tonow)
        flushHistoric(historicTpl,exp,"乐库推广合作PV/UIP收益统计")
        
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20070628113357">070601-ad-wc.txt
</t>
<t tx="zoomq.20070628113410">&lt;&lt; declarations &gt;&gt;
''''ad10song.py'...
    v0.7 070628 for 0706 10首歌 广告播放统计
    v0.8 070706 for 0707 10首歌 广告播放统计
: 070706 Running@61:
```
$ zcat runYueKuLogs/070701/*.cn.gz | awk '{ print $8 }' | fgrep "ad-" | tee ykstate/adplayed/070701-ad.log | wc -l &gt; ykstate/adplayed/070701-ad-wc.txt &amp;
```
'''
VERSION = "ad10song.py v0.8-070706@Zoom.Quiet"

@others

if __name__ == '__main__':      # this way the module can be
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python ad10song.py 'path/to/chinese.font.ttf' monthPoint [like 0707]
        """ % VERSION
    else:
        defaultfont = sys.argv[1]           #[-10:-4]    print tonow
        crtMonth = sys.argv[2]                 #[-10:-4]    print tonow
        print "tyr to analyzing and chart month ad playing "
        exp = "repadp"         #/home/zoomq/workspace/mu_tangle_ZoomQuiet/YKSEO/    
        #dailyTpl = 'adp_dailyrep.tpl'
        historicTpl = 'adp_historic.tpl'
        flushHistoric(historicTpl,exp,"`乐库十首歌`广告播放统计",crtMonth)
        
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20070628113410.1"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
from operator import itemgetter

from pychartdir import *

from fnmatch import *



</t>
<t tx="zoomq.20070628113410.11">def chartHistoric(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    data0 = cdrData
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    cheight = 100+len(labels)*15
    pheight = len(labels)*15
    c = XYChart(240,cheight, 0xffffc0, 0x000000, 1)
    c.setPlotArea(60, 60, 140,pheight, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.swapXY()
    #cwidth = 100+len(labels)*36
    #pwidth = len(labels)*36
    #c = XYChart(cwidth,240, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, 0xeeeeee)
    #c.setYAxisOnRight()
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(90, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")

    # Set the labels on the x axis
    c.xAxis().setLabels(labels)#.setFontAngle(45)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(0)
    c.yAxis().setWidth(0)
    
    c.addAreaLayer(data0, 
        c.linearGradientColor(0, 50, 0, 255, 0x80ff0000L, 0x80ffffffL))
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(0)
    layer.setDataLabelFormat("{value|0}")
    layer.addDataSet(data0, 0xcf4040, "播放次数").setDataSymbol(CircleSymbol, 9,0xffff00)
    # Add the second line. Plot the points with a 9 pixel dismond symbol
    #layer.addDataSet(data1, 0x40cf40, "UIP").setDataSymbol(DiamondSymbol, 9)

    # output the chart
    c.makeChart(cdrPNG)
    ## 输出可点击区域定义
    imageMap = c.getHTMLImageMap("adplayed/{xLabel}-ad.log"
        , "date={xLabel}"
        , "title='{xLabel}:: {value|0} '")
    return imageMap
</t>
<t tx="zoomq.20070628113410.2">def flushHistoric(tpl,exproot,cdrTitle,crtMonth):
    '''更新历史趋势表 乐库合作广告位PV/UIP收益历史趋势图
    '''
    myVer = VERSION
    dataPath = "adplayed"
    repTitle = cdrTitle
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    historicDumps = filter(os.listdir(dataPath),"%s*-ad-wc.txt"%crtMonth)
    historicDumps.sort(reverse=True)
    #historicDumps.sort()
    print historicDumps
    dDumped = flushDumps(dataPath,crtMonth)
    adplay = dDumped[0]
    addate = dDumped[1]
    ptDetails = detailsADPlay(addate,adplay)
    
    labels = addate
    #print cdrData
    imageMap = chartHistoric(defaultfont
        ,"%s" % cdrTitle
        ,"%s/adplayed-%s.png"%(exproot,crtMonth)
        ,adplay
        ,labels
        ,"{value|0}")
       
    
    
    open("index.html","w").write(open(tpl).read() % locals())
    #print imageMap
    
    print "%s histroic chart upgradED!" % creaTime


</t>
<t tx="zoomq.20070628113410.3">ptDetails="&lt;tr&gt;&lt;th&gt;日期&lt;/th&gt;&lt;th&gt;播放&lt;/th&gt;&lt;/tr&gt;"


for i in range(len(addate),0,-1):
    ptDetails +="&lt;tr&gt;"
    ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% addate[i-1]
    ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% adplay[i-1]
    ptDetails += "&lt;/tr&gt;"







</t>
<t tx="zoomq.20070628141214">for his in historicDumps:
    adplay.append(open("%s/%s"%(dataPath,his)).read())
    addate.append(his[:6])

print addate
</t>
<t tx="zoomq.20070703142601">@path adpvstats/070703pvuip/
</t>
<t tx="zoomq.20070703142601.1">&lt;&lt; declarations &gt;&gt;
VERSION = "urgencyUIPV v0.7 070703"

@others

if __name__ == '__main__':      # this way the module can be
    logpath = "../runYueKuReports"
    armpath = logpath #"pvlosting"
    #flushHisPlay(logpath,armpath)
    days=["0629","0630","0701","0702",]
    uipv={'totPV':[3030198,3261248,3413675,2842273],
        'totUIP':[410810,488240,485488,555542],
        'totHome':[73444,60153,62096,76780],
        'kktphp':[159785,190842,193310,130479],
        'kktcnt':[72018,86518,86875,59446],   
        'singer':[33240,41134,39718,39471],
        'ent.sina':[130803,165295,156669,401514],
        }
        
    chartHisPV(sys.argv[1]
        ,"070703 PV波动分析"
        ,"pv-070703.png"
        ,uipv
        ,days
        ,"{value|0}"
        )
    
    chartHisUIP(sys.argv[1]
        ,"070703 UIP波动分析"
        ,"uip-070703.png"
        ,uipv
        ,days
        ,"{value|0}"
        )
    print "Mnnnn export all that report!!!!"


    
</t>
<t tx="zoomq.20070703142601.2"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle

from pychartdir import *
#from _cfg import *
from fnmatch import *
#import adodb




</t>
<t tx="zoomq.20070703142601.3">
dbhost = "10.210.70.62" #"10.210.70.57"#"localhost"
dbname = "MusicLibrary"
dbuser = "zoomq"
dbpasswd = "ykse01q2w3e"
conn = adodb.NewADOConnection('mysql')
#print self.conn
#conn.Connect('server', 'user', 'pwd', 'db')
conn.Connect(dbhost
    ,dbuser
    ,dbpasswd
    ,dbname)
# for unicode read
conn.Execute("set names 'utf8' ;")

sql = "SELECT Name FROM `Song` WHERE SongID=%s ;"


</t>
<t tx="zoomq.20070703142826">def chartHisPV(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    dataPV = [scaled(i,10000.0) for i in uipv['totPV']]
    dataUIP = [scaled(i) for i in uipv['totUIP']] #uipv['totUIP']
    print dataUIP
    dataHome = [scaled(i) for i in uipv['totHome']] 
    dataKKT = [scaled(i) for i in uipv['kktphp']] 
    dataKKC = [scaled(i) for i in uipv['kktcnt']]
    dataS = [scaled(i) for i in uipv['singer']]
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    #c.swapXY()
    cwidth = 120+len(labels)*80
    pwidth = len(labels)*80
    c = XYChart(cwidth,260, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60,60, pwidth,160, 0xffffff, 0xeeeeee)
    #c.setYAxisOnRight()
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(15, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")
    # Set the labels on the x axis
    c.xAxis().setLabels(labels)#.setFontAngle(45)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    #c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(1)
    c.yAxis().setWidth(2)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(2)
    layer.setDataLabelFormat("{value}")
    #c.addAreaLayer(dataKKT, 
    #    c.linearGradientColor(0, 50, 0, 255, 0x80ff0000L, 0x80ffffffL))
    layer.addDataSet(dataKKT, 0xaabb00
        , "kktone.php(千pv)").setDataSymbol(TriangleSymbol, 9,0x40cf40)
    layer.addDataSet(dataKKC, 0x00aabb
        , "C_kktone.html(千pv)").setDataSymbol(RightTriangleSymbol, 9)
    layer.addDataSet(dataPV, 0x993300, "总PV(万pv)").setDataSymbol(SquareSymbol, 8)
    
    #layer.addDataSet(dataUIP, 0x334433, "UIP").setDataSymbol(DiamondSymbol, 9)
    layer.addDataSet(dataHome, 0x003399, "Home(千pv)").setDataSymbol(CircleSymbol, 9)
    #layer.addDataSet(dataS, 0x40cf40, "/yueku/s/").setDataSymbol(PolygonShape(5), 9)
    
    

    # output the chart
    c.makeChart(cdrPNG)



</t>
<t tx="zoomq.20070703145221">def scaled(data,smark=1000.0):
    '''按比例处理数值
    '''
    #print data,smark
    print "%.2f"%(data/smark)
    dstr = "%.2f"%(data/smark)
    
    return dstr+""</t>
<t tx="zoomq.20070703154520">def chartHisUIP(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    dataPV = [scaled(i,10000.0) for i in uipv['totPV']]
    dataUIP = [scaled(i) for i in uipv['totUIP']] #uipv['totUIP']
    print dataUIP
    dataHome = [scaled(i) for i in uipv['totHome']] 
    dataKKT = [scaled(i) for i in uipv['kktphp']] 
    dataKKC = [scaled(i) for i in uipv['kktcnt']]
    dataS = [scaled(i) for i in uipv['singer']]
    dataEnt = [scaled(i) for i in uipv['ent.sina']]
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    #c.swapXY()
    cwidth = 120+len(labels)*80
    pwidth = len(labels)*80
    c = XYChart(cwidth,260, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60,60, pwidth,160, 0xffffff, 0xeeeeee)
    #c.setYAxisOnRight()
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(15, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")
    # Set the labels on the x axis
    c.xAxis().setLabels(labels)#.setFontAngle(45)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    #c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(1)
    c.yAxis().setWidth(2)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(2)
    layer.setDataLabelFormat("{value}")#{value|0}
    #c.addAreaLayer(dataKKT, 
    #    c.linearGradientColor(0, 50, 0, 255, 0x80ff0000L, 0x80ffffffL))
    #layer.addDataSet(dataKKT, 0xaabb00
    #    , "kktone.php(千pv)").setDataSymbol(TriangleSymbol, 9,0x40cf40)
    #layer.addDataSet(dataKKC, 0x00aabb
    #    , "C_kktone.html(千pv)").setDataSymbol(RightTriangleSymbol, 9)
    #layer.addDataSet(dataPV, 0x993300, "总PV(万pv)").setDataSymbol(SquareSymbol, 8)
    
    layer.addDataSet(dataUIP, 0x334433, "UIP(千IP)").setDataSymbol(DiamondSymbol, 9)
    layer.addDataSet(dataHome, 0x003399
        , "Home(千PV)").setDataSymbol(CircleSymbol, 9)    
    
    layer.addDataSet(dataEnt, 0x40cf40
        , "来自ent(千PV)").setDataSymbol(PolygonShape(5), 9)
    
    #layer.addDataSet(dataS, 0x40cf40
    #    , "/yueku/s/(千PV)").setDataSymbol(PolygonShape(5), 9)
    
    

    # output the chart
    c.makeChart(cdrPNG)



</t>
<t tx="zoomq.20070706111610">def detailsADPlay(addate,adplay):
    '''export TAB of ad10 details info.
    '''
    ptDetails="&lt;tr&gt;&lt;th&gt;日期&lt;/th&gt;&lt;th&gt;播放&lt;/th&gt;&lt;/tr&gt;"
    for i in range(len(addate),0,-1):
        ptDetails +="&lt;tr&gt;"
        ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% addate[i-1]
        ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% adplay[i-1]
        ptDetails += "&lt;/tr&gt;"
    return ptDetails


</t>
<t tx="zoomq.20070706112021">def flushDumps(dataPath,crtMonth):
    '''scaning dir export data list
    '''
    historicDumps = filter(os.listdir(dataPath),"%s*-ad-wc.txt"%crtMonth)
    historicDumps.sort(reverse=True)
    #historicDumps.sort()
    print historicDumps
    
    adplay = []
    addate = []
    for his in historicDumps:
        adplay.append(open("%s/%s"%(dataPath,his)).read())
        addate.append(his[:6])

    return (adplay,addate)

</t>
<t tx="zoomq.20070719150734">&lt;&lt; declarations &gt;&gt;
''''ad10song.py'
    - v0.7 070628 for 0707 功能广告统计
    - v0.8 070725 for 综合图表配合支持
    - v0.9 070802 for monther porter
    - v1.0 070803 fixed monther export dumps files path
'''
VERSION = "adclicks.py v1.0-070803@Zoom.Quiet"
ADPD = {
    "all":{'wc':0,'uip':0,'name':"总计"}
    ,"404":{'wc':0,'uip':0,'name':"请求错误"}
    ,"ver4":{'wc':0,'uip':0,'name':"MV广告"}
    ,"ver5.":{'wc':0,'uip':0,'name':"功能广告"}
    ,"ver5-250230":{'wc':0,'uip':0,'name':"矩形"}
    ,"ver5-300250":{'wc':0,'uip':0,'name':"画中画"}
    ,"ver5-750120":{'wc':0,'uip':0,'name':"通栏"}
    }

@others

if __name__ == '__main__':      # this way the module can be
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python adclicks.py 'path/to/chinese.font.ttf' datePoint [like 070719]
        """ % VERSION
    else:
        defaultfont = sys.argv[1] #[-10:-4]    print tonow
        crtMonth = sys.argv[2][:4] #[-10:-4]    print tonow
        tonow = sys.argv[2]
        #dailyTpl = 'adp_dailyrep.tpl'
        historicTpl = 'adp_historic.tpl'
        print "tyr to analyzing and chart month ad playing "
        exp = "repadp"
        logp = "adplayed"
        #statoday(tonow,logp) #=&gt; 070719-ad.dump
        staToday(tonow,logp,exp)
        #flushHistoric(historicTpl,exp,"YKad. Clik STATs",crtMonth)
        
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20070719150734.1"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
from operator import itemgetter

from pychartdir import *

from fnmatch import *



</t>
<t tx="zoomq.20070719150734.5">def flushDumps(dataPath):
    '''scaning dir export data list
    '''
    chartDict = {'label':[]
        ,"all":[]
        ,"404":[]
        ,"ver4":[]
        ,"ver5.":[]
        ,"ver5-250230":[]
        ,"ver5-300250":[]
        ,"ver5-750120":[]
    }

    historicDumps = filter(os.listdir(dataPath),"*-ADPD.dump")
    historicDumps.sort(reverse=True)
    #print historicDumps
    for his in historicDumps:
        hisDumpf = "%s/%s"%(dataPath,his)
        print "load and prased %s" % hisDumpf
        hisDict = pickle.load(open(hisDumpf))
        chartDict['label'].append(his[:6])
        for k, v in sorted(hisDict.items()
            , key=lambda x: x[0]
            ,reverse=False):
            chartDict[k].append(hisDict[k]['wc'])
    #print ptDetails
    return chartDict

</t>
<t tx="zoomq.20070719150734.6">def detailsADPlay(dataDict,exPath,crtMonth):
    '''export TAB of ad10 details info.
    '''
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    TPL = "idx.playmonth.tpl"
    EXP = "%s/%s/index.html" % (exPath,crtMonth)
    DUMPS = "%s/%s" % (exPath,crtMonth)
    logURL="../../adplayed/%s/%s-ad-%s.%s.txt"
    bgMark = ("fefefe","efefef")
    ## exp html TAB
    ptDetails ="&lt;tr&gt;&lt;th&gt;日期&lt;/th&gt;"    
    for k, v in sorted(dataDict.items()
        , key=lambda x: x[0]
        ,reverse=False):
        ptDetails+="&lt;th&gt;%s&lt;br/&gt;&lt;sup&gt;%s&lt;/sup&gt;&lt;/th&gt;"%(dataDict[k]['name'],k)
    ptDetails+="&lt;/tr&gt;"
    historicDumps = filter(os.listdir(DUMPS),"*-ADPD.dump")
    historicDumps.sort(reverse=True)
    #print historicDumps
    count = 0
    for his in historicDumps:
        count+=1
        hisDict = pickle.load(open("%s/%s"%(DUMPS,his)))
        ptDetails+='''&lt;tr style='background-color:#%s;'&gt;&lt;th&gt;%s
            &lt;/th&gt;'''%(bgMark[count%2],his[2:6])
        for k, v in sorted(hisDict.items()
            , key=lambda x: x[0]
            ,reverse=False):
            #print k,v        
            ptDetails+='''&lt;td&gt;
                &lt;sup&gt;::PV&lt;/sup&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;br/&gt;
                &lt;sub&gt;::UIP&lt;/sub&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/td&gt;
                '''%(logURL%(crtMonth,his[:6],k.split(".")[0],"log")
                    ,hisDict[k]['wc']
                    ,logURL%(crtMonth,his[:6],k.split(".")[0],"sort")
                    ,hisDict[k]['uip'])
        ptDetails+="&lt;/tr&gt;"
    #print ptDetails
    
    open(EXP,"w").write(open(TPL).read() % locals())
    return ptDetails



</t>
<t tx="zoomq.20070719150734.7">def chartAdpHistoric(defaultfont
    ,cdrTitle
    ,cdrPNG
    ,dataDict
    ,labelFormat
    ,crtMonth):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrPNG
    dataAll = dataDict['all']
    data404 = dataDict['404']
    dataVer4 = dataDict['ver4']
    dataVer5 = dataDict['ver5.']
    labels = dataDict['label']
    cheight = 100+len(labels)*15
    pheight = len(labels)*15
    cwidth = 100+len(labels)*20
    pwidth = len(labels)*20
    c = XYChart(cwidth,240, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60, 60, pwidth,100, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60, 60, pwidth,100, c.linearGradientColor(0, 55, 0, 335, 
        0xFFF6F5,0xFFB1A8), -1, Transparent, 0xffffff)
    
    #c.swapXY()
    #c.setYAxisOnRight()
    c.setBackground(silverColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(10, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")

    # Set the labels on the x axis
    c.xAxis().setLabels(labels).setFontAngle(90)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(0)
    c.yAxis().setWidth(0)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(1)
    #layer.setDataLabelFormat("{value|0}")
    layer.addDataSet(dataAll, 0xcf4040
        ,"all").setDataSymbol(CircleSymbol, 9,0xffff00)
    layer.addDataSet(data404, 0x998888
        ,"404").setDataSymbol(CrossShape(0.3), 8,0x556655)
    layer.addDataSet(dataVer4, 0x40cf40
        ,"ver4").setDataSymbol(PolygonShape(4), 8,0x40cf40)
    layer.addDataSet(dataVer5, 0x4040cf
        ,"ver5").setDataSymbol(PolygonShape(5), 8,0x4040cf)

    #c.addAreaLayer(data404, 
    #    c.gradientColor( 0,50, 0,255, 0xff0000L ,0xffffff ))
        #c.linearGradientColor( 0,50, 0,255,  0x80ff0000L, 0x80ffffffL))


    # output the chart
    c.makeChart(cdrPNG)
    &lt;&lt;chartMap&gt;&gt;



</t>
<t tx="zoomq.20070719152838">def staToday(tonow,dataPath,exp):
    '''scaning filtered log files
    '''
    historicDumps = filter(os.listdir(dataPath),"%s-ad*.txt"%tonow)
    historicDumps.sort(reverse=True)
    #historicDumps.sort()
    #print historicDumps
    print ADPD.keys()
    for logf in historicDumps:
        for key in ADPD.keys():
            #print key
            if key in logf:
                #print "%s/%s"%(dataPath,logf)
                for f in ADPD[key].keys():
                    if f in logf:
                        print "%s/%s"%(dataPath,logf)
                        ADPD[key][f] = open("%s/%s"%(dataPath,logf)).read()
                    else:
                        pass
            else:
                #as name
                pass
    #print ADPD
    pickle.dump(ADPD
            ,open("%s/%s/%s-ADPD.dump"%(exp,tonow[:4],tonow),"w"))
        
    return ADPD

</t>
<t tx="zoomq.20070726123725">## 输出可点击区域定义
imageMap = c.getHTMLImageMap("adplayed/%s/{xLabel}-ad-{dataSetName}.log.txt"%crtMonth
    , "date={xLabel}"
    , "title='{xLabel}:: {value|0} '")
return imageMap

</t>
<t tx="zoomq.20090205120222.1"># 测试.leo 是否可以享受 svn 的自动属性
__author__  = "$Author: zoomq $"
__date__    = "$Date: 2009-12-04 09:00:41 +0800 (五, 2009-12-04) $"
__revision__= "$Rev: 11788 $"
__url__     = "$URL: http://svn.rdev.kingsoft.net/matter/tangle/zoom.quiet/hackminds.leo $"
</t>
<t tx="zoomq.20090312171356.20">@path triplemapping

</t>
<t tx="zoomq.20090408143801.1">#from fnmatch import *
#historicGzs = filter(os.listdir(self.exPath),"*.gz")

        begin = time.time()

        ps.main()
        
        end = time.time()
        print "&gt;&gt;&gt;usedTime::%.2fs&lt;&lt;&lt;"%(end - begin)
</t>
<t tx="zoomq.20090408143801.2">
sorted( iterable[, cmp[, key[, reverse]]])
    Return a new sorted list from the items in iterable. The optional
arguments cmp, key, and reverse have the same meaning as those for the
list.sort() method. New in version 2.4. 

&gt;&gt;&gt;

for k, v in sorted(myDict.items()
    , key=lambda x: x[1]
    ,reverse=True):
    print k,v 

&gt;&gt;&gt;&gt;a better and quicker way:

from operator import itemgetter
sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)

:)

</t>
<t tx="zoomq.20090408143801.4">
</t>
<t tx="zoomq.20090408143801.5">@path moinmaper/test
</t>
<t tx="zoomq.20090408143801.7">@path _tpls

</t>
<t tx="zoomq.20090409142411.1">http://groups.google.com/group/python-cn/browse_thread/thread/1f674f2fe812fc67/b1f034f965d230ff?lnk=gst&amp;q=%E5%AD%97%E5%85%B8%E6%8E%92%E5%BA%8F&amp;rnum=1#b1f034f965d230ff
</t>
<t tx="zoomq.20090409142411.10">hotop = ""
for song in rs[:21]:
    #SongID,OnlineTime,Name,SongWord
    SongID = song[0]
    #print SongID
    try:
        OnlineTime = song[1].strftime("%Y-%m-%dT%H:%M:%SZ")
    except:
        OnlineTime = self.defaultDate
    Name = song[2]      #self._smartcode(song[2])
    #print Name
    SongWord = " ` ".join(song[3].split())  #self._smartcode(song[3])
    hotop += open(self.whatSong).read() % locals()



</t>
<t tx="zoomq.20090409142411.11">safelock = self.limitpage
pageTime = ""
songList = ""
for song in rs[22:]:
    #SongID,OnlineTime,Name,SongWord
    SongID = song[0]    
    try:
        OnlineTime = song[1].strftime("%Y-%m-%dT%H:%M:%SZ")
    except:
        OnlineTime = self.defaultDate
    #OnlineTime = song[1].strftime("%Y-%m-%dT%H:%M:%SZ")
    Name = song[2]      #self._smartcode(song[2])
    #print Name
    SongWord = " ` ".join(song[3].split())  #self._smartcode(song[3])
    songList += open(self.whatSong).read() % locals()
    safelock -=1
    if 0 == safelock:
        #export as .htm
        pageTime = OnlineTime
        open("%s/idx%s.htm"% (self.exWhatnew,SongID)
            ,"w").write(open(self.whatRing).read() % locals())
        print "exported::%s/idx%s.htm"% (self.exWhatnew,SongID)
        songList = ""
        safelock = self.limitpage


</t>
<t tx="zoomq.20090409142411.12">historicPage = filter(os.listdir(self.exWhatnew),"*.htm")
print historicPage

for his in historicPage:
    hisPage = his[:-4]
    upTrac += open(self.whatTrac).read() % locals()

</t>
<t tx="zoomq.20090409142411.13">def _smartcode(self,stream):
    """smart recove stream into UTF-8
    """
    ustring = stream
    codedetect = chardet.detect(ustring)["encoding"]
    print codedetect
    try:
        print ustring
        ustring = unicode(ustring, codedetect)
        print ustring
        return "%s %s"%("",ustring.encode('utf8'))
    except:
        return u"bad unicode encode try!"

</t>
<t tx="zoomq.20090409142411.14">def gzipall(self,xml,gzipfn):
    '''export gziped xml files
    '''
    gzfn = "%s-%s.xml.gz" % (gzipfn,daylog)
    print "gziped ::%s" % gzfn
    gz = gzip.GzipFile("%s/%s" % (self.exPath,gzfn),"w")
    gz.write(xml)
    #self.mapgz.append(gzfn)





</t>
<t tx="zoomq.20090409142411.15">def map2gz(self,relist,urltpl,fname):
    '''export xml.gz 
    datetime.date.today().strftime("%Y-%m-%d")
    '''
    urlxml = self.xmlurl(relist
        ,urltpl
        ,open(self.urlTpl).read())    

    if 0==len(urlxml):
        print "none export"
        return 
    else:
        for i in range(len(urlxml)):
            urls = urlxml[i]
            self.gzipall(open(self.idxTpl).read() % locals()
                ,"%s-%s" % (fname,i)
                )    
    print "%s::due mapping all %s into xml done..." % (VERSION,fname)
    logging.info("%s::due mapping all %s into xml done..."% (VERSION,fname))


</t>
<t tx="zoomq.20090409142411.16">def xmlurl(self,data,urltpl,xmltpl):
    '''usage data list with tpl return all url MXL nodes
        - add safe lock as 40960
    '''
    safelimi = 40960
    expxmli = []
    xml = ""
    count = 0
    if 0 == len(data):
        print "empty update!"
        return expxmli
    else:            

        for d in data:
            if None == d[1]:
                priority = "%f" % self.priority
                update = self.defaultDate
            else:
                priority = "%f" % (self.priority+0.1)
                update = d[1].strftime("%Y-%m-%dT%H:%M:%SZ")
            ykurl = urltpl % d[0]
            if count == safelimi:
                xml += xmltpl % locals()
                expxmli.append(xml)
                print "safed: %d "%count
                xml = ""
                count = 0            
            else:
                xml += xmltpl % locals()
                count += 1
    print "finally: %d"%count
    expxmli.append(xml)
    return expxmli


</t>
<t tx="zoomq.20090409142411.17">def mapall(self):
    '''scan DB and export xml
    datetime.date.today().strftime("%Y-%m-%d")
    '''
    result = self.result
    url2album = "http://music.sina.com.cn/yueku/a/%s.html"
    url2artist = "http://music.sina.com.cn/yueku/s/%s.html"
    url2song = "http://music.sina.com.cn/yueku/m/%s.html"    
    url2mv = "http://music.sina.com.cn/yueku/v/%s.html"    

    self.map2gz(result['rowAlbum'],url2album,"ykAlbum")
    self.map2gz(result['rowArtist'],url2artist,"ykArtist")
    self.map2gz(result['rowSong'],url2song,"ykSong")
    self.map2gz(result['rowMV'],url2mv,"ykMV")


</t>
<t tx="zoomq.20090409142411.18">def genidx(self):
    '''found all .gz export the sitemapindex
    '''
    historicGzs = filter(os.listdir(self.exPath),"*.gz")
    print historicGzs

    url2gz = "http://music.sina.com.cn/%s"    
    sitemaps = ""
    for gz in historicGzs:
        ykmap = url2gz % gz
        update = time.strftime("%Y-%m-%dT%H:%M:%SZ",
            time.localtime(os.path.getmtime("%s/%s" % (self.exPath,gz)))
            )

        #update = "%s"%(time.strftime("%Y-%m-%dT%H:%M:%SZ",time.localtime()))
        sitemaps += open(self.mapMap).read() % locals()
    open(self.expxml,"w").write(open(self.idxMap).read() % locals())
    #self.mapMap
    #self.mapgz.append(gzfn)





</t>
<t tx="zoomq.20090409142411.2">&lt;&lt; yksitemapping declarations &gt;&gt;

@others

if __name__ == '__main__':
    """base usage
    """
    mappingyk = sitemapping()
    ## for Baidu ...
    mappingyk.whatnew()
    ## for google...
    #mappingyk.mapall()
    #mappingyk.genidx()
    #mappingyk.gzipall()




</t>
<t tx="zoomq.20090409142411.28">
[loggers]
keys=root,example

[handlers]
keys=consoleHandler,rotateFileHandler

[formatters]
keys=simpleFormatter

[formatter_simpleFormatter]
format=[%(asctime)s](%(levelname)s)%(name)s : %(message)s

[logger_root]
level=DEBUG
handlers=consoleHandler,rotateFileHandler

[logger_example]
level=DEBUG
handlers=consoleHandler,rotateFileHandler
qualname=example
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

[handler_rotateFileHandler]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=simpleFormatter
args=('test.log', 'a', 200000, 9)
</t>
<t tx="zoomq.20090409142411.3"># -*- coding: utf-8 -*-
'''yksitemapping.py
    v0.8 070614 for idx all song update...
    v0.7 070601 for yseo0
usage tools to Validator xml right?
$ python2.4 /usr/lib/python2.5/site-packages/XSV/commandLine.py --help
Usage: [-ktwilDNend] [-u baseURI] [-T type] [-E elt] [-r [-r [-r]] [ind|alt]] [-s stylesheet] [-o outputFile] [-p profileOut] file [schema1 schema2 . . .]
'''

VERSION = "yksitemapping.py v0.8 070613"

import os,sys,time,datetime
import gzip
import chardet

import adodb
#from pychartdir import *
from fnmatch import *


import logging
daylog = "%s"%(time.strftime("%y%m%d",time.localtime()))
logging.basicConfig(level=logging.DEBUG,
                   format='[%(asctime)s]%(levelname)-8s"%(message)s"',
                    datefmt='%Y-%m-%d %a %H:%M:%S',
                    filename='logs/yksitemap-%s.log'%daylog,
                    filemode='a+')
</t>
<t tx="zoomq.20090409142411.4">class sitemapping:
    """main class zip all done
    """
	@others
</t>
<t tx="zoomq.20090409142411.5">def __init__(self):
    """ini all
    """
    self.mapgz = []
    self.defaultDate = '2007-04-01T00:00:00Z'
    self.priority = 0.5
    self.limitpage = 1024
    self.mapName = "新浪正版音乐仓库 - 乐库 !"

    @others

    #init when creat obj.
    self.result = self.DBscanner()
    print self.result.keys()

</t>
<t tx="zoomq.20090409142411.6">self.exPath = "gsitemap"
self.exWhatnew = "whatnew"
#self.logPath = "logs/"
self.expxml = self.exPath+'/yksitemap.xml'

self.idxTpl = 'yksitemap_xml.tpl'
self.urlTpl = 'yksitemap_url.tpl'

self.idxMap = 'yksitemap_idx-xml.tpl'
self.mapMap = 'yksitemap_map.tpl'

self.whatIdx = 'ykwhatnew.idx.tpl'
self.whatSong = 'ykwhatnew.song.tpl'
self.whatTrac = 'ykwhatnew.trac.tpl'
self.whatRing = 'ykwhatnew.ring.tpl'


</t>
<t tx="zoomq.20090409142411.7">
self.dbhost = "10.210.70.62" #"10.210.70.57"#"localhost"
self.dbname = "MusicLibrary"
self.dbuser = "zoomq"
self.dbpasswd = "ykse01q2w3e"
self.conn = adodb.NewADOConnection('mysql')
#print self.conn
#conn.Connect('server', 'user', 'pwd', 'db')
self.conn.Connect(self.dbhost
    ,self.dbuser
    ,self.dbpasswd
    ,self.dbname)
# for unicode read
self.conn.Execute("set names 'utf8' ;")

self.sql = {
    "status":" WHERE Status=50 "
    ,"type":" AND MediaType=%d "
    ,"time":" AND CreateTime &gt; '%s' "
    ,"orderby":" ORDER BY `OnlineTime` DESC "
    }


</t>
<t tx="zoomq.20090409142411.8">def DBscanner(self):
    """scan table for CoverRate:
        - TAB:Song MediaType=0|1 (song|mv)
    """
    result = {'rowArtist':[],'rowAlbum':[],'rowSong':[]}

    sqlCArtist = "SELECT ArtistID,OnlineTime FROM `Artist` %s %s;"%(
        self.sql['status']
        ,self.sql['orderby'])
        #AND CreateTime&gt;'2007-06-06';"
    sqlCAlbum = "SELECT AlbumID,OnlineTime FROM `Album`  %s %s;"%(
        self.sql['status']
        ,self.sql['orderby'])
        #AND CreateTime&gt;'2007-06-06';"
    sqlCSong = "SELECT SongID,OnlineTime,Name,SongWord FROM `Song` %s %s %s;"%(
        self.sql['status']
        ,self.sql['type']%0
        ,self.sql['orderby'])
        #FROM `Song` WHERE Status=50 AND MediaType=0 ORDER BY `OnlineTime` DESC"
        #AND CreateTime&gt;'2007-06-06';"    
    sqlCMV = "SELECT SongID,OnlineTime FROM `Song` %s %s %s;"%(
        self.sql['status']
        ,self.sql['type']%1
        ,self.sql['orderby'])
        #WHERE Status=50 AND MediaType=1 ORDER BY `OnlineTime` DESC"
        #AND CreateTime&gt;'2007-06-06';"
    today = datetime.date.today()
    print "%s due DB scan start::"%time.strftime("%y%m%d %H:%M:%S",time.localtime())
    logging.info("%s daily DB scan start::"%today)

    result['rowArtist'] = self.conn.GetAll(sqlCArtist)
    result['rowAlbum'] = self.conn.GetAll(sqlCAlbum)
    #print rowAlbum
    result['rowSong'] = self.conn.GetAll(sqlCSong)
    result['rowMV'] = self.conn.GetAll(sqlCMV)

    #print result['rowAlbum']
    print "%s due DB scan end::"%time.strftime("%y%m%d %H:%M:%S",time.localtime())
    logging.info("%s daily DB scan end::"%today)

    return result


</t>
<t tx="zoomq.20090409142411.9">def whatnew(self):
    '''export htmls for Baidu grasp
    '''
    myVer = VERSION
    mapName = self.mapName
    updaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    upDate  = time.strftime("%Y-%m-%d",time.localtime())
    upTrac = ""    
    rs = self.result['rowSong']
    @others

    open("%s/index.html"%self.exWhatnew
        ,"w").write(open(self.whatIdx).read() % locals())
    print "exported root idx::\n  %s/index.html"% self.exWhatnew

    #print rs['rowSong'][122][1].strftime("%Y-%m-%dT%H:%M:%SZ")
    print "export all! %s/index.html"%self.exWhatnew







</t>
<t tx="zoomq.20090409202326.1">digraph mainmap {
/*图片生成命令:: need:: apt-get install graphviz-cairo
$ dot test.dot -Tpng -o test.png -Tcmapx -o test.map
        style=filled,fillcolor=lightyellow,
        shape=plaintext,        
        ranksep=1.2,size="12,32"
        overlap=false,splines=true,
*/
    graph [label="%(dotmapname)s",
        labelloc="b",labeljust="r",
        fontsize=12.0,
        fontname="VeraSansYuanTi-Regular.ttf",
        ratio=compress,
        rankdir=LR,
        ranksep=0.2,
        ];
    node[fontsize=10.5,color=gray70,
        target="new",shape=plaintext,
        style=filled,fillcolor=lightyellow,
        height=0.1,
        ];
    /*dir=both,plaintext		arrowType=vee,
        */
    edge [fontsize=8.0,fontcolor=gray15,
        color=gray40,
        arrowsize=0.5,arrowhead=vee,arrowtail=none,
        len=2.1,
        ];
    /*关系
        len=1.7,
    KUP-&gt;PEM    [arrowhead=normal,style="setlinewidth(4)"]; 
    */    
%(dotnodes)s

    /*页面
    Td    [label="Toad\n未来特性管理视图",shape=component,URL=""];
    */

%(dotrelats)s

}</t>
<t tx="zoomq.20090409202326.2">%(dotitem)s [label="%(dotlabel)s",URL="%(doturl)s"];</t>
<t tx="zoomq.20090413195224.1">%s-&gt;%s [label="%s",style="setlinewidth(%s)",color="#%s"];</t>
<t tx="zoomq.20091104131309.7">
dot
    层级向量图谱
    The default GraphViz layout for directed graph layouts
neato
    关系图
    For undirected graph layouts - spring model
twopi
    压缩关系图
    For undirected graph layouts - radial
circo
    稀疏?图谱
    For undirected graph layouts - circular
fdp
    思维图
    For undirected graph layouts - force directed spring model
</t>
<t tx="zoomq.20091204092707.5427">- 使用 @shadow 最好！
- 定制的快捷键是:
    + toggle-split-direction      = Alt-;
    + close-window                = Ctrl-w    #Alt-F4
    + read-at-shadow-nodes        = Shift+Alt+D
    + check-leo-file              = Shift+Alt+L
    + untangle                    = Shift+Alt+S
    + de-hoist                    = F8
    + hoist                       = F9


</t>
<t tx="zoomq.20100311095515.3578">三元关系图谱实际记要
@others




</t>
<t tx="zoomq.20100311095515.3582">原始需求:
    数据如：学生的类型

学生类型     包括    不一定知道但是敢说的
有些学生    就是    敢说
学生类型    包括    知道但不愿意说
知道而且喜欢发言    是    少数
不一定知道但是敢说的    活跃    课堂气氛
学生类型    包括    知道而且喜欢发言
个别学生    表达    很到位
不知道也不敢说    活跃    课堂气氛
学生类型    包括    不知道也不敢说
学生类型    包括    个别学生
学生类型    如    有些学生
知道但不愿意说    会    容易被教师忽略
知道而且喜欢发言    是    少数

效果图如...，
但是主要问题是我想让“学生类型”与包括之间的连线的粗细与它的被重复了多少次成正比。
而现在这张图则只能反应，从属关系，不能反映到底重复了多少次。
下图这个例子中，学生类型——包括  就被重复了5次，而 活跃——课堂气氛 则被重复了两次，
还有的时候，三元命题是完全重复的，
比如 知道而且喜欢回答——是——少数，重复了两次，那么他们的连线则应该比其他命题粗才是。

</t>
<t tx="zoomq.20100311095515.3583">- 100310 接收任务
- 100311 快速完成:
    - :10 环境整理
    - :15 框架完成
    - :20 分析完成
    - :30 美化图谱，发现逻辑问题
    - :40 重构，完成图谱
    共: 1:55 </t>
<t tx="zoomq.20100311095515.4617">@path moinmaper</t>
<t tx="zoomq.20100311095515.4618">@path moinmaper/tpl

</t>
<t tx="zoomq.20100311095515.4619">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
        &lt;!-- edited with elementtree (http://effbot.org/zone/element-index.htm) by Zoom.Quiet  --&gt;
        &lt;?xml-stylesheet type='text/xsl' href='freemind.xsl'?&gt;
&lt;map version="0.9.0"&gt;
&lt;!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net --&gt;

%(moinodes)s

&lt;/map&gt;</t>
<t tx="zoomq.20100311095515.4620">%s-&gt;%s [style="setlinewidth(%s)",color="#%s"];</t>
<t tx="zoomq.20100311095515.4621">%(dotitem)s [label="%(dotlabel)s",URL="%(doturl)s"];</t>
<t tx="zoomq.20100311095515.4622">digraph mainmap {
/*图片生成命令:: need:: apt-get install graphviz-cairo
$ dot test.dot -Tpng -o test.png -Tcmapx -o test.map
        style=filled,fillcolor=lightyellow,
        shape=plaintext,        
        ranksep=1.2,size="12,32"
        overlap=false,splines=true,
*/
    graph [label="%(dotmapname)s地图 {by Zoom.Quiet}",
        labelloc="t",labeljust="l",
        fontsize=12.0,
        fontname="VeraSansYuanTi-Regular.ttf",
        ratio=compress,size="10,34",
        rankdir=LR,
        ranksep=0.2,
        ];
    node[fontsize=10.5,color=gray70,
        target="new",shape=plaintext,
        style=filled,fillcolor=lightyellow,
        height=0.1,
        ];
    /*dir=both,plaintext
		arrowType=vee,
        */
    edge [fontsize=8.0,
        fontcolor=gray15,
        color=gray40,
		arrowhead=normal,
		arrowtail=none,
        len=2.1,
        ];
    /*关系
        len=1.7,
    KUP-&gt;PEM    [arrowhead=normal,style="setlinewidth(4)"]; 
    */    
%(dotdigraph)s

    /*页面
    Td    [label="Toad\n未来特性管理视图",shape=component,URL=""];
    */

%(dotpages)s




}

</t>
<t tx="zoomq.20100311095515.4623"># -*- coding: utf-8 -*-

MM={'URL':"http://wiki.s.kingsoft.net/moin"
    ,'RAW':"action=raw"
    ,"MAPNAME":"AutoTest 维基文章"
    ,"DEEP":5
    ,"LWIDTH":1.4
    ,"LWSTEP":0.2
    ,"COLORSEED":998899
    ,"COLORSTEP":221122
    }
XML={"ROOT":"~/"
    ,'ROOTXT':u"aut 维基文章结构地图"
    ,"XPTXT":"child::node[@TEXT='%s']"
    ,"XPID":"child::node[@ID='%s']"
    ,"XPATH":"child::node[@PATH='%s']"
    ,"XPROOT":"child::node[@PATH='~']"
    }


</t>
<t tx="zoomq.20100311095515.4624">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"&gt;

&lt;&lt;annotations&gt;&gt;

&lt;xsl:output method="html" doctype-public="-//W3C//DTD HTML 4.01 Strict//EN" 
    doctype-system="http://www.w3.org/TR/html4/strict.dtd"/&gt;

&lt;&lt;xsl:template match="/"&gt;&gt;

&lt;&lt;xsl:template match="node"&gt;&gt;

&lt;/xsl:stylesheet&gt;
</t>
<t tx="zoomq.20100311095515.4625">  &lt;!--
       File:        freemind.xsl
       Version:     0.1
       Description: A XSLT stylesheet to transform mindmap files created with FreeMind (http://freemind.sf.net)
                    into HTML files. The transformation will keep the structure of the files, clouds (with it's colors),
                    icons, internal and external links and the ability to collapse whole subtrees of the document (with
                    JavaScript enabled).
                    The results of the transformation were tested and found to be working in the following browsers:
                    -Internet Explorer 6
                    -Mozilla Firefox 0.9 (should be working with nearly any browser using the Geko engine)
                    -Konqueror
                    -Opera 7
                    Other browsers were not tested, but you should have a good chance of gettting things to work
                    with them.
       Usage:       Use any XSLT-Processor (development was done using xsltproc under Linux) to apply this stylesheet
                    to the FreeMind-file. Copy the result and all the PNG-Files inside the script directory
                    (including the icons-subdir) into a directory of it's own (e.g. on a webserver).
                    Open the HTML-file with a webbrowser.
       Author:      Markus Brueckner &lt;freemind-xsl@slash-me.net&gt;
       License:     BSD license without advertising clause. (see http://www.opensource.org/licenses/bsd-license.php
                     for further details)
  --&gt;
</t>
<t tx="zoomq.20100311095515.4626">&lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta name="generator" content="FreeMind-XSL Stylesheet (see: http://freemind-xsl.dev.slash-me.net/ for details)" /&gt;
        &lt;meta name="editor" content="Leo (see: http://webpages.charter.net/edreamleo/front.html for details)" /&gt;
        &lt;&lt;title&gt;&gt;
        &lt;&lt;style&gt;&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;!-- choose the first nodes text again as the headline --&gt;
        &lt;&lt;h1&gt;&gt;

        &lt;xsl:apply-templates /&gt;

      &lt;/body&gt;
    &lt;/html&gt;
&lt;/xsl:template&gt;
</t>
<t tx="zoomq.20100311095515.4627">&lt;h1&gt;
    &lt;xsl:choose&gt;
    &lt;xsl:when test="/map/node"&gt;
      &lt;xsl:value-of select="/map/node/@TEXT" /&gt;
      &lt;sup&gt;
            &lt;xsl:value-of select="/map/node/@ALT" /&gt;
        &lt;/sup&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      FreeMind2HTML Mindmap
    &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
&lt;/h1&gt;
</t>
<t tx="zoomq.20100311095515.4628">&lt;!-- Stylesheet, generator and some JavaScript for the collapsing of the trees --&gt;
&lt;link rel="stylesheet" type="text/css" href="res/freemind.css" /&gt;
&lt;script type="text/javascript"&gt;
  &lt;![CDATA[
  &lt;!--
       function toggle(id)
       {
           div_el = document.getElementById(id);
           img_el = document.getElementById('img'+id);
           if (div_el.style.display != 'none')
           {
              div_el.style.display='none';
              img_el.src = 'res/show.png';
           }
           else
           {
              div_el.style.display='block';
              img_el.src = 'res/hide.png';
           };
       };
   --&gt;
  ]]&gt;
&lt;/script&gt;
</t>
<t tx="zoomq.20100311095515.4629">&lt;!-- look if there is any node inside the map (there should never be none, but who knows?) 
     and take its text as the title --&gt;
&lt;xsl:choose&gt;
  &lt;xsl:when test="/map/node"&gt;
    &lt;title&gt;&lt;xsl:value-of select="/map/node/@ALT" /&gt;&lt;/title&gt;
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
    &lt;title&gt;FreeMind2HTML Mindmap&lt;/title&gt;
  &lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;
</t>
<t tx="zoomq.20100311095515.4630">&lt;!-- the template to output for each node --&gt;
&lt;xsl:template match="node"&gt;
    &lt;div&gt;
      &lt;!-- generate a unique ID that can be used to reference this node e.g. from the JavaScript --&gt;
      &lt;xsl:variable name="contentID"&gt;
          &lt;xsl:value-of select="generate-id()"/&gt;
      &lt;/xsl:variable&gt;

    &lt;&lt;xsl:choose cloud&gt;&gt;
    &lt;&lt;xsl:for-each select="icon"&gt;&gt;
    &lt;&lt;xsl:choose LINK&gt;&gt;
    &lt;&lt;xsl:if test="@ID"&gt;&gt;
    &lt;&lt;xsl:for-each select="arrowlink"&gt;&gt;
    &lt;&lt;xsl:if test="node"&gt;&gt;
    &lt;/div&gt;
&lt;/xsl:template&gt;
</t>
<t tx="zoomq.20100311095515.4631">&lt;!-- the content div. This div contains all subnodes of this node. It carries the unique ID
   created in the beginning (which is used to hide this div when necessary). The content node
   is only created if there are any subnodes --&gt;
&lt;xsl:if test="node"&gt;        
&lt;div class="content"&gt;
    &lt;xsl:attribute name="id"&gt;
      &lt;xsl:value-of select="$contentID" /&gt;
    &lt;/xsl:attribute&gt;

    &lt;xsl:apply-templates/&gt;
&lt;/div&gt;
&lt;/xsl:if&gt;
</t>
<t tx="zoomq.20100311095515.4632">&lt;!-- if there are arrowlinks inside this node (i.e. this node is connected to another node
   in FreeMind using an arrow), then create a document internal link --&gt;
&lt;xsl:for-each select="arrowlink"&gt;
&lt;a&gt;
  &lt;xsl:attribute name="href"&gt;#FM&lt;xsl:value-of select="@DESTINATION" /&gt;FM&lt;/xsl:attribute&gt;
  &lt;img src="res/ilink.png" alt="Internal Link" class="ilink" /&gt;
&lt;/a&gt;
&lt;/xsl:for-each&gt;
</t>
<t tx="zoomq.20100311095515.4633">&lt;!-- check if this node has an ID (for the document internal links) --&gt;
&lt;xsl:if test="@ID"&gt;
&lt;!-- note: as FreeMind sometimes prepends the IDs with an underscore which is not valid
           as the first character in an HTML id, we surround the ID with FM&lt;ID&gt;FM --&gt;
&lt;a&gt;
  &lt;xsl:attribute name="id"&gt;FM&lt;xsl:value-of select="@ID"/&gt;FM&lt;/xsl:attribute&gt;
&lt;/a&gt;
&lt;/xsl:if&gt;
</t>
<t tx="zoomq.20100311095515.4634">&lt;!-- check whether this node has a link-ID (for external URLs) --&gt;
&lt;xsl:choose&gt;
&lt;xsl:when test="@LINK"&gt;
  &lt;a&gt;
    &lt;xsl:attribute name="href"&gt;
      &lt;xsl:value-of select="@LINK" /&gt;
    &lt;/xsl:attribute&gt;
    &lt;xsl:value-of select="@TEXT" /&gt;
  &lt;/a&gt;
    &lt;snap class="sub"&gt;
        &lt;xsl:value-of select="@STATE" /&gt;
    &lt;/snap&gt;
&lt;/xsl:when&gt;
&lt;xsl:otherwise&gt;
    &lt;xsl:value-of select="@TEXT" /&gt;
    &lt;snap class="sub"&gt;
        &lt;xsl:value-of select="@STATE" /&gt;
    &lt;/snap&gt;
&lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;
</t>
<t tx="zoomq.20100311095515.4635">&lt;!-- when there are icons for this node then output the according &lt;img&gt;-tags --&gt;
&lt;xsl:for-each select="icon"&gt;
&lt;img&gt;
  &lt;xsl:attribute name="src"&gt;icons/&lt;xsl:value-of select="@BUILTIN" /&gt;.png&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="alt"&gt;&lt;xsl:value-of select="@BUILTIN" /&gt;&lt;/xsl:attribute&gt;
&lt;/img&gt;
&lt;/xsl:for-each&gt;
</t>
<t tx="zoomq.20100311095515.4636">&lt;!-- check whether this node is a cloud... --&gt;
&lt;xsl:choose&gt;
    &lt;xsl:when test="cloud"&gt;
    &lt;!-- ...if yes, check whether it has a special color... --&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="cloud/@COLOR"&gt;
                &lt;xsl:attribute name="class"&gt;cloud&lt;/xsl:attribute&gt;
                &lt;xsl:attribute name="style"&gt;background-color: &lt;xsl:value-of select="cloud/@COLOR" /&gt;&lt;/xsl:attribute&gt;
            &lt;/xsl:when&gt;

            &lt;!-- no? Then choose some default color --&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:attribute name="class"&gt;cloud&lt;/xsl:attribute&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
        &lt;xsl:attribute name="class"&gt;node&lt;/xsl:attribute&gt;
    &lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;

@others
</t>
<t tx="zoomq.20100311095515.4637">&lt;!-- check whether this node has any child nodes... --&gt;
&lt;xsl:choose&gt;
    &lt;xsl:when test="node"&gt;
        &lt;!-- ...yes? Then put the "hide" button in front of the text... --&gt;
        &lt;img src="res/hide.png" class="hideshow" alt="hide"&gt;
        &lt;xsl:attribute name="onClick"&gt;&lt;![CDATA[toggle("]]&gt;&lt;xsl:value-of select="$contentID" /&gt;&lt;![CDATA[")]]&gt;&lt;/xsl:attribute&gt;
        &lt;xsl:attribute name="id"&gt;img&lt;xsl:value-of select="$contentID" /&gt;&lt;/xsl:attribute&gt;
        &lt;/img&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
    &lt;!-- ...no? Then output the empty leaf icon --&gt;
        &lt;img src="res/leaf.png" class="hideshow" alt="leaf" /&gt;
    &lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;
</t>
<t tx="zoomq.20100311095515.4638"># -*- coding: utf-8 -*-
'''moinmaper.py
usage Graphviz dot to gen can click map for AutoTest 's MoinMoin doc
    - 090413 fixed exp xml+xslt chked
    - 090416 fixed xpath way
    - 090413 fixed exp color,linewidth ... more feel error,usage dot
    - 090412 fixed Chinese error
    - 090410 creat for base way
usage:
    $ python moinmaper.py data/moin-aut-090408.txt
'''
&lt;&lt;define&gt;&gt;

@others

&lt;&lt;__main__&gt;&gt;


</t>
<t tx="zoomq.20100311095515.4639">import os,sys
import urllib,urllib2
import base64
import traceback
import time,datetime
#import xml.etree.ElementTree as ET
#import xml.etree.cElementTree as lE
from lxml import etree as lE


#import pickle
#from operator import itemgetter
#from fnmatch import *
from cfg import MM,XML
from moinutil import wikiutil

VERSION = "moinmaper.py v9.04.17"
NOW = "%s"%(time.strftime("%y%m%d",time.localtime()))
NOWTIME = "%s"%(time.strftime("%y%m%d %H:%M:%S",time.localtime()))
LOG_FILENAME = '_log/mapping-%s.log'%NOW

#import logging
#import logging.config
'''
logging.basicConfig(level=logging.DEBUG,
                   format='[%(asctime)s]%(levelname)-8s"%(message)s"',
                    datefmt='%Y-%m-%d %a %H:%M:%S',
                    filename='logs/yksitemap-%s.log'%daylog,
                    filemode='a+')
'''
</t>
<t tx="zoomq.20100311095515.4640">if __name__ == '__main__':      # this way the module can be
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python moinmaper.py DataFile [like: data/moin-aut-090408.txt]
        """ % VERSION
    else:
        begin = time.time()
        pf = sys.argv[1]                 #[-10:-4]    print tonow
        mm = mapper(pf)
        #mm.mapall()
        mm.mapxml()
        #mm._treelist(pf)
        end = time.time()
        #@others

        info = "&gt;&gt;&gt;runing time=%.2fs&lt;&lt;&lt;"%(end - begin)
        print info
        mm.logger.info("^_^: %s"%info)
        info = "&gt;&gt;&gt;chked nodes=%s&lt;&lt;&lt;"%mm.logdo
        print info
        mm.logger.info("^_^: %s"%info)

        info = ";-) export MoinMoin pages mapping \n by %s"%VERSION
        print info
        mm.logger.info("^_^: %s"%info)

</t>
<t tx="zoomq.20100311095515.4641">root = lE.Element("node")
root.set("ID","ID_0")
root.set("TEXT","node")
root.set("ALT",u"是也乎")
root.set("LINK","http://wiki.s..")
node = lE.SubElement(root, "node")
node.set("TEXT","AutoTest")
#node.text = "AutoTest"
node = lE.SubElement(root, "node")
node.set("TEXT","AutoTest/Design")
#node.text = "AutoTest/Design"
node = lE.SubElement(node, "node")
node.set("TEXT","AutoTest/Design/Library")    
#node.text = "AutoTest/Design/Library"

print lE.tostring(root
    ,encoding='utf-8'
    ,pretty_print=True)
#    ,xml_declaration=True)

tree = lE.ElementTree(root)
#tree.write(self.expxml,"utf-8")
#xp = lE.XPath("child::node[contains(text(), 'AutoTest/Design')]")
xp = lE.XPath(XML['XPTXT']%'AutoTest/Design')
#"child::node[@TEXT='AutoTest/Design']")
crtnode = xp(root)[0]
print "XPath child::node[@TEXT='AutoTest/Design']:\n\t%s"%lE.tostring(crtnode)
node = lE.SubElement(crtnode, "node")
node.set("TEXT","AutoTest/Design/LibNames")    
#node.text = "AutoTest/Design/LibNames"

print lE.tostring(root
    ,encoding='utf-8'
    ,pretty_print=True)
#    ,xml_declaration=True)
</t>
<t tx="zoomq.20100311095515.4642">
'''
path = "AutoTest(2f)Design(2f)PerformanceTesting(2f)IO(c3a6c280c2a7c3a8c283c2bdc3a6c2afc294c3a8c2bec283)"
#mm.gen_dotitem(path)
'''

</t>
<t tx="zoomq.20100311095515.4643">def initlog():
    '''base Limodou blog easy creat logger obj.
    '''
    import logging
    logger = logging.getLogger()
    hdlr = logging.FileHandler(LOG_FILENAME)
    formatter = logging.Formatter("[%(asctime)s]%(levelname)-8s`%(message)s`")
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.NOTSET)
    return logger
</t>
<t tx="zoomq.20100311095515.4644">class mapper:
    """main class for mapping moinmoin pages
    """
	@others

</t>
<t tx="zoomq.20100311095515.4645">def __init__(self,pagenamefile):
    """ini all
    logger.debug("debug message")
    logger.info("info message")
    logger.warn("warn message")
    logger.error("error message")
    logger.critical("critical message")
    """
    self.logger = initlog()
    self.logdo = 0
    self.MM = MM
    self.data = pagenamefile
    self.mapli = []
    self.mapdots = []
    self.gendots = []
    self.dotnodes = ""
    #print open(pagenamefile).read()
    self.xmltree = []
    self.xmlnodes = ""
    @others


    #print self.MM

</t>
<t tx="zoomq.20100311095515.4646">self.pathlog = "_log/"
self.pathtpl = "tpl/"

self.tplmain = "moinmaper.tpl"
self.tplitem = "moinpage.tpl"
self.tpldot = "moindot.tpl"
self.tpldotitem = open("%s/%s"%(self.pathtpl,self.tplitem)).read()

self.tmpdotpages = "dotpages.tmp"
open(self.tmpdotpages,"w").write("")

self.expdot = "moinmaper.dot"
</t>
<t tx="zoomq.20100311095515.4647">self.tplxml = "moinxml.tpl"
self.expxml = "index.xml"

self.xmlroot = lE.Element("node")
self.xmlroot.set("ID","ID_0")
self.xmlroot.set("TEXT",XML['ROOTXT'])
self.xmlroot.set("ALT","{%s @%s}"%(VERSION,NOWTIME))
self.xmlroot.set("PATH","NULL")
self.xmlroot.set("LINK","#")
</t>
<t tx="zoomq.20100311095515.4648">def mapxml(self):
    """main action for do all mapping
    export as FreeMind like xml+xslt
    """
    moinodes = self._lxmltree()
    xmltpl = open("%s/%s"%(self.pathtpl,self.tplxml)).read()
    open(self.expxml,"w").write(xmltpl% locals())



</t>
<t tx="zoomq.20100311095515.4649">def _lxmltree(self):
    """load page URL one bt one into one xml tree
    """
    #init xml obj root node
    root = self.xmlroot
    acc = 0
    for line in open(self.data):
        #if acc &gt;= 15:break
        #else:acc += 1
        if "http" == line[:4]:
            pass
        elif "PageCommentData" == line[-17:-2]:
            pass
        else:
            @others
    #print "root::\n%s"%lE.tostring(root,encoding='utf-8',pretty_print=True)
    return lE.tostring(root,encoding='utf-8',pretty_print=True)
    #print "crtnode::\n%s"%lE.tostring(crtnode,encoding='utf-8',pretty_print=True)










</t>
<t tx="zoomq.20100311095515.4650">fpath = line[:-2]
#print "acc:%s ~ \n\t%s"%(acc,fpath)
wikiname = wikiutil.unquoteWikiname(fpath)
wikiurl = wikiutil.quoteWikinameURL(wikiname)
fpli = fpath.split("(2f)")
urli = wikiurl.split("/")
#&lt;try0&gt;&gt;
#crtnode = root
for i in range(len(fpli)+1):
    path = "/".join(fpli[:i])
    if "" == path:continue
    #print path
    self._mountson(root,i,fpli,urli)
    '''
    xp = lE.XPath(XML['XPATH']%path)
    match = xp(root)
    if [] == match:
        crtnode = self._parentfix(crtnode,path,i,fpli,urli)
    else:
        crtnode = match[0]
    '''








</t>
<t tx="zoomq.20100311095515.4651">for i in range(len(fpli)):
    path = "/".join(fpli[:i])
    if "" == path:continue
    xp = lE.XPath(XML['XPATH']%path)
    match = xp(root)
    if [] == match:
        crtnode = self._parentfix(crtnode,path,i,fpli,urli)
        '''
        print path,"\n",XML['XPATH']%path
        if "" == "/".join(fpli[:i-1]):
            crtnode = root
        else:
            print XML['XPATH']%"/".join(fpli[:i-1])
            xparent = lE.XPath(XML['XPATH']%"/".join(fpli[:i-1]))
            #crtnode = xparent(root)[0]
            print xparent(root)
            print lE.tostring(xparent(root)[0],pretty_print=True)
        print lE.tostring(root,pretty_print=True
        '''
        #&lt;new node&gt;&gt;
    else:
        crtnode = match[0]
        #print lE.tostring(crtnode,pretty_print=True)
        #&lt;new node&gt;&gt;
</t>
<t tx="zoomq.20100311095515.4653">def _mountson(self,root,deep,fpli,urli):
    '''try moun the son node,just try parent one time
    '''
    path = XML['ROOT']+"/".join(fpli[:deep])
    fpath = "/".join(fpli[:deep])
    base64code = base64.b64encode(path).replace("=","")
    url = "/".join(urli[:deep])

    #xpath = XML['XPATH']%path
    #xp = lE.XPath(xpath)
    npath = "//node[@PATH='%s']"%path
    #print "try mount::\n\t%s"%npath
    #test the path exit?
    #if [] != xp(root):
    if [] != root.xpath(npath):
        #print "exited:%s"%npath
        return
    else:
        #no appented
        crtpath = XML['ROOT']+"/".join(fpli[:deep-1])
        xp = "//node[@PATH='%s']"%crtpath
        #print "try xparent::\n\t%s"%crtpath
        #print "xpre(root):%s"%xpre(root)        
        if XML['ROOT'] == crtpath:
            crtnode = root
        else:
            match = root.xpath(xp)
            #print match
            crtnode = match[0]
        &lt;&lt;new node&gt;&gt;
        #print lE.tostring(root,pretty_print=True)





</t>
<t tx="zoomq.20100311095515.4655">def _parentfix(self,crtnode,path,deep,fpli,urli):
    '''fixed all deep parent nodes
    '''
    base64code = base64.b64encode(path).replace("=","")
    url = "/".join(urli[:deep])
    root = self.xmlroot
    print path,"\n",XML['XPATH']%path
    #print "join(fpli::%s"%"/".join(fpli[:deep-1])
    if "" == "/".join(fpli[:deep-1]):
        crtnode = root
    else:
        xpath = XML['XPATH']%"/".join(fpli[:deep-1])
        if XML["XPROOT"] == xpath:
            crtnode = root
            &lt;&lt;new node&gt;&gt;
        else:
            xparent = lE.XPath(xpath)
            print "try xparent::\n\t%s"%xpath
            print xparent(root)
            if [] == xparent(root):
                crtnode = self._parentfix(crtnode,path,deep-1,fpli,urli)
            else:
                print "match xparent::\n\t%s"%xpath
                crtnode = xparent(root)[0]
                &lt;&lt;new node&gt;&gt;
        #print lE.tostring(xparent(root)[0],pretty_print=True)
    #print lE.tostring(root,pretty_print=True)
    return crtnode

</t>
<t tx="zoomq.20100311095515.4656">node = lE.SubElement(crtnode, "node")
node.set("ID","ID_%s"%base64code)
#node.set("TEXT",path)
label=self._getitle(fpath)
node.set("TEXT",label[0].decode('utf8'))
if "" !=label[1]:node.set("STATE",label[1].decode('utf8'))

node.set("PATH",path)
node.set("LINK","%s/%s"%(MM['URL'],url))

</t>
<t tx="zoomq.20100311095515.4657">def mapall(self):
    """main action for do all mapping
    .write(open(self.whatIdx).read() % locals())
    """
    self.urlanalyze();
    dotmapname = self.MM["MAPNAME"]
    dotpages = self.dotnodes    #.encode('unicode_escape').decode('string_escape')
    #open(self.tmpdotpages).read()
    dotdigraph = "\n".join(self.mapli)
    #print dotpages
    #print unicode(self.dotpages,'ascii','cjk_replace').encode('utf8')
    open(self.expdot,"w").write(open("%s/%s"%(self.pathtpl,self.tplmain)).read() % locals())
</t>
<t tx="zoomq.20100311095515.4658">def urlanalyze(self):
    """split moin data page url into list
    """
    for url in open(self.data):
        #print url[:-2] escape \n + /
        #print url[:-2].split("(2f)")
        #self.treelist(url[:-2].split("(2f)"))
        #print url[-17:-2]
        if "http" == url[:4]:
            pass
        elif "PageCommentData" == url[-17:-2]:
            pass
        else:
            self.gen_dotmap(url)
            #pass
            #url[:-2].split("(2f)")
            #print quoteWikinameURL(url)
    #open(self.tmpdotpages,"a").write(self.dotnodes)
    self.gen_lostnodes()

    #@others

    #print self.dotpages

</t>
<t tx="zoomq.20100311095515.4659">def gen_dotmap(self,realPath):
    """gen dot uage MoinMoin page items
    - dot node and map gen in diff loop
    - from raw url get node label  urllib2.urlopen('http://wiki.s.kingsoft.net/moin/AutoTest/AutoTestMembersList?action=raw').readlines()
    - usage file dir path name through Base64 as dot node
    """
    fpath = realPath[:-2]
    wikiurl = wikiutil.unquoteWikiname(fpath)
    #print "dirname:%s"%realPath[:-2]
    #print "unquoteWikiname:%s"%wikiutil.unquoteWikiname(realPath[:-2])
    #print "quoteWikinameURL:%s"%wikiutil.quoteWikinameURL(realPath[:-2])
    subs = fpath.split("(2f)")
    if int(self.MM["DEEP"]) &lt; len(subs):
        pass
    else:
        # one by one gen. all mapping
        &lt;&lt;intermap&gt;&gt;
    #self.dotpages += dotnode



</t>
<t tx="zoomq.20100311095515.4660">self.gen_dotitem(fpath)
#print subs
#lwidth=self.MM["LWIDTH"]-(self.MM["LWSTEP"]*deep) COLORSEED COLORSTEP
dotwikiname =  ["(2f)".join(subs[:i+1]) for i in range(len(subs))]
for node in dotwikiname:
    base46node = base64.b64encode(node).replace("=","")
    if base46node not in self.mapdots:
        self.mapdots.append((base46node,node))
    else:
        pass

dotbase64 = ""
dottpl = open("%s/%s"%(self.pathtpl,self.tpldot)).read()

&lt;&lt;try mapping&gt;&gt;



</t>
<t tx="zoomq.20100311095515.4661">try:
    dotbase64 = [base64.b64encode(i).replace("=","") for i in dotwikiname]
    for i in range(len(dotbase64)):
        lwidth=self.MM["LWIDTH"]-(self.MM["LWSTEP"]*i)
        if lwidth&lt;=0:
            lwidth=0.1
        color = self.MM["COLORSEED"]-(self.MM["COLORSTEP"]*i)
        if lwidth&lt;=0:
            color=self.MM["COLORSEED"]

        if i+1 &gt;= len(dotbase64):
            break
        else:
            intermap = dottpl%(dotbase64[i],dotbase64[i+1],lwidth,color)
            #print intermap
            if intermap not in self.mapli:
                self.mapli.append(intermap)
except UnicodeEncodeError:
    self.logger.debug("UnicodeEncodeError : %s"%realPath)
except:
    self.logger.warn("others code bad ")
</t>
<t tx="zoomq.20100311095515.4662">def gen_dotitem(self,fpath):
    '''ask wiki found the first title as node label
    dotlabel = self._getitle(rawurl)
    \return file self.tmpdotpages include all dot node define
    \return self.gendots as list recoded all node gen. for gen_lostnodes
    '''
    #print fpath
    wikiname = wikiutil.unquoteWikiname(fpath)
    wikiurl = wikiutil.quoteWikinameURL(wikiname)
    ##for right export Chinese
    #print fpath.encode('unicode_escape').decode('string_escape')
    dotitem = base64.b64encode(fpath).replace("=","")

    self.gendots.append(dotitem)
    #print dotitem
    #dotlabel = dotitem[:7]
    dotlabel = self._getitle(fpath)
    '''test what mis in _getitle()
    if "NULL" == dotlabel:
        print "gen_dotitem:%s"%wikipath
        return 
    '''
    doturl = "%s/%s"%(self.MM["URL"],wikiurl)
    #wikipath.encode('unicode_escape').decode('string_escape'))
    #self.logger.debug("all picked : %s"%dotitem)
    #print self.tpldotitem%locals()
    self.dotnodes += self.tpldotitem%locals()




</t>
<t tx="zoomq.20100311095515.4663">def gen_lostnodes(self):
    '''gen that not real creat pages in path relation
    '''
    #print self.mapdots
    #print self.gendots
    lose = []
    for i in self.mapdots:
        if i[0] not in self.gendots:
            lose.append(i)
    #print lose
    dotlosed = ""
    for node in lose:
        wikipath = wikiutil.unquoteWikiname(node[1])
        dotitem = node[0]
        dotlabel = wikipath.encode('unicode_escape').decode('string_escape')
        doturl = "#"
        dotlosed += self.tpldotitem%locals()
    #print "dotlosed::&gt;%s&lt;::dotlosed"%dotlosed
    #self.logger.debug("dotlosed::%s"%dotlosed)
    self.dotnodes += dotlosed



</t>
<t tx="zoomq.20100311095515.4664">def _getitle(self,fpath):
    """load page URL one bt one into one big relations list
    \return [dotlabel,sub info.]
    """
    label=[]
    self.logdo +=1  # log do how many nodes
    wikiname = wikiutil.unquoteWikiname(fpath)
    wikiurl = wikiutil.quoteWikinameURL(wikiname)
    #.encode('unicode_escape').decode('string_escape')
    rawurl = "%s/%s?%s"%(self.MM["URL"]
        ,wikiurl
        ,self.MM["RAW"])

    #dotlabel = wikiname.encode('unicode_escape').decode('string_escape')
    dotlabel = (wikiname.split("/")[-1]).encode("utf-8")
    #.encode('unicode_escape').decode('string_escape')
    #.encode("utf-8").split("/")[-1:]
    #print dotlabel
    try:
        pagewiki = urllib2.urlopen(rawurl)
    except urllib2.URLError:
        #print "URLError: \n %s"%rawurl
        self.logger.debug("URLError : %s"%rawurl)
        #print dotlabel
        label.append(dotlabel)
        label.append("未创建/已删除")
        return label
    except urllib2.HTTPError:
        #print "404 \n %s"%rawurl
        #print "HTTPError: \n %s"%rawurl
        self.logger.debug("HTTPError : %s"%rawurl)
        label.append(dotlabel)
        label.append("未创建")
        return label
    except:
        #exc = sys.exc_info()
        #print traceback.print_exc()
        print "others code bad \n %s"%rawurl
        self.logger.warn("others bad : %s"%rawurl)
        label.append(dotlabel)
        label.append("未创建")
        return label
        #return "%s&lt;sub&gt;未创建&lt;/sub&gt;"%dotlabel

    for line in pagewiki.readlines():
        if "=" == line[:1]:
            #print line.split()[1]
            dotlabel = line.split()[1]
            break
        else:
            continue
    label.append(dotlabel)
    label.append("")
    return label
    #return dotlabel

</t>
<t tx="zoomq.20100311095515.4665"># -*- coding: utf-8 -*-
'''dot-gen-html.py
    v0.9 090413 append others Graphviz export
    v0.8 090312 forpy.kingsoft.net 增补网页标题参数
    v0.7 090312 for KUP.rdev dot mapping gen html
usage:
    $ python dot-gen-html.py py-k-idx.dot "py.kingsoft.net 数据地图" index.html
'''

&lt;&lt;define&gt;&gt;

@others

&lt;&lt;__main__&gt;&gt;








</t>
<t tx="zoomq.20100311095515.4666">import os,sys,time
import popen2

VERSION = "dot-gen-html v9.04.13"
GENTIME = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
TPL = "res/index.tpl"
DODOT = "dot %s.dot -Tpng -o %s.png -Tcmapx -o %s.map"
TPLDOT = "%s %s.dot -Tpng -o %s-%s.png -Tcmapx -o %s.map"
FOOTCSS="css/stickyfooter/footer.css"

</t>
<t tx="zoomq.20100311095515.4667">if __name__ == '__main__':      # this way the module can be
    if 5 != len(sys.argv):
        print """ %s usage::
$ python dot-gen-html 'u.dot' "PageTitle" exPageNam[like index.html) dotool
        """
    else:
        dotf = sys.argv[1]
        titp = sys.argv[2]
        expf = sys.argv[3]
        mapn = dotf.split(".")[0]
        dotool = sys.argv[4]
        #print dir()
        gen(dotool,dotf,titp,expf)
    #open(exrep,"w").write(open(tpl).read() % locals())

</t>
<t tx="zoomq.20100311095515.4668">def gen(dotoolname,dotf,titp,wxpf):
    """usage dot exp png+img map,auto usage html tpl writ out idenx page!
    """
    script = VERSION
    gentime = GENTIME
    dotmap = dotf.split(".")[0]
    #print dotmap
    mapdot = dotmap
    dotool = dotoolname
    #TPLDOT = "%s %s.dot -Tpng -o %s-%s.png -Tcmapx -o %s.map"
    genmap = TPLDOT%(dotool
        ,mapdot
        ,mapdot
        ,dotool
        ,mapdot)
    title = titp
    print genmap
    r, w, e = popen2.popen3(genmap)
    print e.readlines()
    print r.readlines()
    r.close()
    e.close()
    w.close()

    cmapx = open("%s.map"%dotmap).read()
    css = open(FOOTCSS).read()
    open(wxpf,"w").write(open(TPL).read() % locals())
    print "%s done gen mapping @%s"%(VERSION,GENTIME)


</t>
<t tx="zoomq.20100311095515.4669">@path moinmaper/moinutil</t>
<t tx="zoomq.20100311095515.4670"># -*- coding: utf-8 -*-
"""
    MoinMoin - Wiki Utility Functions

    @copyright: 2000-2004 Juergen Hermann &lt;jh@web.de&gt;,
                2004 by Florian Festi,
                2006 by Mikko Virkkil,
                2005-2008 MoinMoin:ThomasWaldmann,
                2007 MoinMoin:ReimarBauer
    @license: GNU GPL, see COPYING for details.
"""
&lt;&lt;define&gt;&gt;
"""base MoinMoin.wikiutil
"""


@others

&lt;&lt;__main__&gt;&gt;


</t>
<t tx="zoomq.20100311095515.4671">#import cgi
import codecs
import os
import re
import time
import urllib

# Precompiled patterns for file name [un]quoting
UNSAFE = re.compile(r'[^a-zA-Z0-9_]+')
QUOTED = re.compile(r'\(([a-fA-F0-9]+)\)')

config_charset = "utf-8"
</t>
<t tx="zoomq.20100311095515.4672">if __name__ == '__main__':      # this way the module can be
    print unquoteWikiname("AutoTest(2f)Meeting(2f)2008(2d)01(2d)15_EndOf2007/")
    testname = "AutoTest(2f)Design(2f)PerformanceTesting(2f)IO(c3a6c280c2a7c3a8c283c2bdc3a6c2afc294c3a8c2bec283)/"
    print unquoteWikiname(testname)
    testname="AutoTest(2f)Design(2f)TestCase(2f)UI(2f)ET(2fe69da1e4bbb6e6a0bce5bc8f)_(e7bc96e8be91e69da1e4bbb6e6a0bce5bc8f)/"
    print unquoteWikiname(testname)
    open("unquoteWikiname.txt",'w').write(unquoteWikiname(testname))</t>
<t tx="zoomq.20100311095515.4673"># constants for page names
PARENT_PREFIX = "../"
PARENT_PREFIX_LEN = len(PARENT_PREFIX)
CHILD_PREFIX = "/"
CHILD_PREFIX_LEN = len(CHILD_PREFIX)

#############################################################################
### Getting data from user/Sending data to user
#############################################################################

@others
</t>
<t tx="zoomq.20100311095515.4674">def decodeWindowsPath(text):
    """ Decode Windows path names correctly. This is needed because many CGI
    servers follow the RFC recommendation and re-encode the path_info variable
    according to the file system semantics.

    @param text: the text to decode, string
    @rtype: unicode
    @return: decoded text
    """

    import locale
    cur_charset = locale.getdefaultlocale()[1]
    try:
        return unicode(text, 'utf-8')
    except UnicodeError:
        try:
            return unicode(text, cur_charset, 'replace')
        except LookupError:
            return unicode(text, 'iso-8859-1', 'replace')
</t>
<t tx="zoomq.20100311095515.4675">def decodeUnknownInput(text):
    """ Decode unknown input, like text attachments

    First we try utf-8 because it has special format, and it will decode
    only utf-8 files. Then we try config.charset, then iso-8859-1 using
    'replace'. We will never raise an exception, but may return junk
    data.

    WARNING: Use this function only for data that you view, not for data
    that you save in the wiki.

    @param text: the text to decode, string
    @rtype: unicode
    @return: decoded text (maybe wrong)
    """
    # Shortcut for unicode input
    if isinstance(text, unicode):
        return text

    try:
        return unicode(text, 'utf-8')
    except UnicodeError:
        if config.charset not in ['utf-8', 'iso-8859-1']:
            try:
                return unicode(text, config.charset)
            except UnicodeError:
                pass
        return unicode(text, 'iso-8859-1', 'replace')
</t>
<t tx="zoomq.20100311095515.4676">def decodeUserInput(s, charsets='utf-8'):
    """charsets=[config.charset]
    Decodes input from the user.

    @param s: the string to unquote
    @param charsets: list of charsets to assume the string is in
    @rtype: unicode
    @return: the unquoted string as unicode
    """
    '''
    for charset in charsets:
        try:
            return s.decode(charset)
        except UnicodeError:
            pass
    '''
    try:
        return s.decode('utf-8')
    except UnicodeError:
        pass
    raise UnicodeError('The string %r cannot be decoded.' % s)
</t>
<t tx="zoomq.20100311095515.4677"># this is a thin wrapper around urllib (urllib only handles str, not unicode)
# with py &lt;= 2.4.1, it would give incorrect results with unicode
# with py == 2.4.2, it crashes with unicode, if it contains non-ASCII chars
def url_quote(s, safe='/', want_unicode=False):
    """
    Wrapper around urllib.quote doing the encoding/decoding as usually wanted:

    @param s: the string to quote (can be str or unicode, if it is unicode,
              config.charset is used to encode it before calling urllib)
    @param safe: just passed through to urllib
    @param want_unicode: for the less usual case that you want to get back
                         unicode and not str, set this to True
                         Default is False.
    """
    if isinstance(s, unicode):
        s = s.encode(config.charset)
    elif not isinstance(s, str):
        s = str(s)
    s = urllib.quote(s, safe)
    if want_unicode:
        s = s.decode(config.charset) # ascii would also work
    return s
</t>
<t tx="zoomq.20100311095515.4678">def url_quote_plus(s, safe='/', want_unicode=False):
    """
    Wrapper around urllib.quote_plus doing the encoding/decoding as usually wanted:

    @param s: the string to quote (can be str or unicode, if it is unicode,
              config.charset is used to encode it before calling urllib)
    @param safe: just passed through to urllib
    @param want_unicode: for the less usual case that you want to get back
                         unicode and not str, set this to True
                         Default is False.
    """
    if isinstance(s, unicode):
        s = s.encode(config.charset)
    elif not isinstance(s, str):
        s = str(s)
    s = urllib.quote_plus(s, safe)
    if want_unicode:
        s = s.decode(config.charset) # ascii would also work
    return s
</t>
<t tx="zoomq.20100311095515.4679">def url_unquote(s, want_unicode=True):
    """
    Wrapper around urllib.unquote doing the encoding/decoding as usually wanted:

    @param s: the string to unquote (can be str or unicode, if it is unicode,
              config.charset is used to encode it before calling urllib)
    @param want_unicode: for the less usual case that you want to get back
                         str and not unicode, set this to False.
                         Default is True.
    """
    if isinstance(s, unicode):
        s = s.encode(config.charset) # ascii would also work
    s = urllib.unquote(s)
    if want_unicode:
        try:
            s = decodeUserInput(s, [config.charset, 'iso-8859-1', ]) # try hard
        except UnicodeError:
            s = s.decode('ascii', 'replace') # better than crashing
    return s
</t>
<t tx="zoomq.20100311095515.4680">def quoteWikinameURL(pagename, charset="utf-8"):
    """ Return a url encoding of filename in plain ascii

    Use urllib.quote to quote any character that is not always safe.

    @param pagename: the original pagename (unicode)
    @param charset: url text encoding, 'utf-8' recommended. Other charset
                    might not be able to encode the page name and raise
                    UnicodeError. (default config.charset ('utf-8')).
    @rtype: string
    @return: the quoted filename, all unsafe characters encoded
    """
    pagename = pagename.encode(charset)
    return urllib.quote(pagename)
</t>
<t tx="zoomq.20100311095515.4681">def escape(s, quote=0):
    """ Escape possible html tags

    Replace special characters '&amp;', '&lt;' and '&gt;' by SGML entities.
    (taken from cgi.escape so we don't have to include that, even if we
    don't use cgi at all)

    @param s: (unicode) string to escape
    @param quote: bool, should transform '\"' to '&amp;quot;'
    @rtype: when called with a unicode object, return unicode object - otherwise return string object
    @return: escaped version of s
    """
    if not isinstance(s, (str, unicode)):
        s = str(s)

    # Must first replace &amp;
    s = s.replace("&amp;", "&amp;amp;")

    # Then other...
    s = s.replace("&lt;", "&amp;lt;")
    s = s.replace("&gt;", "&amp;gt;")
    if quote:
        s = s.replace('"', "&amp;quot;")
        s = s.replace("'", "&amp;#x27;")
    return s
</t>
<t tx="zoomq.20100311095515.4682">########################################################################
### Storage
########################################################################

# Precompiled patterns for file name [un]quoting
UNSAFE = re.compile(r'[^a-zA-Z0-9_]+')
QUOTED = re.compile(r'\(([a-fA-F0-9]+)\)')

@others

</t>
<t tx="zoomq.20100311095515.4683">def quoteWikinameFS(wikiname, charset="utf-8"):
    """ Return file system representation of a Unicode WikiName.
config.charset
    Warning: will raise UnicodeError if wikiname can not be encoded using
    charset. The default value of config.charset, 'utf-8' can encode any
    character.

    @param wikiname: Unicode string possibly containing non-ascii characters
    @param charset: charset to encode string
    @rtype: string
    @return: quoted name, safe for any file system
    """
    filename = wikiname.encode(charset)

    quoted = []
    location = 0
    for needle in UNSAFE.finditer(filename):
        # append leading safe stuff
        quoted.append(filename[location:needle.start()])
        location = needle.end()
        # Quote and append unsafe stuff
        quoted.append('(')
        for character in needle.group():
            quoted.append('%02x' % ord(character))
        quoted.append(')')

    # append rest of string
    quoted.append(filename[location:])
    return ''.join(quoted)
</t>
<t tx="zoomq.20100311095515.4684">def unquoteWikiname(filename, charsets='utf-8'):
    """ Return Unicode WikiName from quoted file name.

    We raise an InvalidFileNameError if we find an invalid name, so the
    wiki could alarm the admin or suggest the user to rename a page.
    Invalid file names should never happen in normal use, but are rather
    cheap to find.

    This function should be used only to unquote file names, not page
    names we receive from the user. These are handled in request by
    urllib.unquote, decodePagename and normalizePagename.

    Todo: search clients of unquoteWikiname and check for exceptions.

    @param filename: string using charset and possibly quoted parts
    @param charsets: list of charsets used by string
        charsets=[config.charset]
    @rtype: Unicode String
    @return: WikiName
    """
    ### Temporary fix start ###
    # From some places we get called with Unicode strings
    if isinstance(filename, type(u'')):
        filename = filename.encode(config_charset)
    ### Temporary fix end ###

    parts = []
    start = 0
    for needle in QUOTED.finditer(filename):
        # append leading unquoted stuff
        parts.append(filename[start:needle.start()])
        start = needle.end()
        # Append quoted stuff
        group = needle.group(1)
        # Filter invalid filenames
        if (len(group) % 2 != 0):
            raise InvalidFileNameError(filename)
        try:
            for i in range(0, len(group), 2):
                byte = group[i:i+2]
                character = chr(int(byte, 16))
                parts.append(character)
        except ValueError:
            # byte not in hex, e.g 'xy'
            raise InvalidFileNameError(filename)

    # append rest of string
    if start == 0:
        wikiname = filename
    else:
        parts.append(filename[start:len(filename)])
        wikiname = ''.join(parts)

    # FIXME: This looks wrong, because at this stage "()" can be both errors
    # like open "(" without close ")", or unquoted valid characters in the file name.
    # Filter invalid filenames. Any left (xx) must be invalid
    #if '(' in wikiname or ')' in wikiname:
    #    raise InvalidFileNameError(filename)

    wikiname = decodeUserInput(wikiname, charsets)
    return wikiname
</t>
<t tx="zoomq.20100311095515.4685">def cjk_replace(exc):
    if not isinstance(exc, UnicodeDecodeError):
        raise TypeError("don't know how to handle %r" % exc)
    if exc.end + 1 &gt; len(exc.object):
        raise TypeError('unknown codec ,the object too short!')
    ch1 = ord(exc.object[exc.start:exc.end])
    newpos = exc.end + 1
    ch2 = ord(exc.object[exc.start + 1:newpos])
    sk = exc.object[exc.start:newpos]
    if 0x81&lt;=ch1&lt;=0xFE and (0x40&lt;=ch2&lt;=0x7E or 0x7E&lt;=ch2&lt;=0xFE): # GBK
        return (unicode(sk,'cp936'), newpos)
    if 0x81&lt;=ch1&lt;=0xFE and (0x40&lt;=ch2&lt;=0x7E or 0xA1&lt;=ch2&lt;=0xFE): # BIG5
        return (unicode(sk,'big5'), newpos)
    raise TypeError('unknown codec !')
codecs.register_error("cjk_replace", cjk_replace)
</t>
<t tx="zoomq.20100311095515.4686"># -*- coding: utf-8 -*-
"""
    MoinMoin - Page class

    Page is used for read-only access to a wiki page. For r/w access see PageEditor.
    A Page object is used to access a wiki page (in general) as well as to access
    some specific revision of a wiki page.

    The RootPage is some virtual page located at / and is mainly used to do namespace
    operations like getting the page list.

    Currently, this is all a big mixture between high-level page code, intermediate
    data/underlay layering code, caching code and low-level filesystem storage code.
    To see the filesystem storage layout we use, best is to look into data/pages/
    (underlay dir uses the same format).

    TODO:
    * Cleanly separate the code into packages for:
      * Page (or rather: Item)
      * Layering
      * Cache
      * Storage
    * ACLs should be handled on a low layer, raising an Exception when access
      is denied, so we won't have security issues just because someone forgot to check
      user.may.read(secretpage).
    * The distinction between a item and a item revision should be clearer.
    * Items can be anything, not just wiki pages, but also files of any mimetype.
      The mimetype hierarchy should be modelled by a MimeTypeItem class hierarchy.

    @copyright: 2000-2004 by Juergen Hermann &lt;jh@web.de&gt;,
                2005-2008 by MoinMoin:ThomasWaldmann,
                2006 by MoinMoin:FlorianFesti,
                2007 by MoinMoin:ReimarBauer
    @license: GNU GPL, see COPYING for details.
"""

&lt;&lt;define&gt;&gt;
"""base MoinMoin.Page
"""

@others

&lt;&lt;__main__&gt;&gt;


</t>
<t tx="zoomq.20100311095515.4687">import os, re, codecs

</t>
<t tx="zoomq.20100311095515.4688">if __name__ == '__main__':      # this way the module can be
    print "empty"</t>
<t tx="zoomq.20100311095515.4689">def _setRealPageName(self, pagedir):
    """ Set page_name to the real case of page name

    On case insensitive file system, "pagename" exists even if the
    real page name is "PageName" or "PAGENAME". This leads to
    confusion in urls, links and logs.
    See MoinMoinBugs/MacHfsPlusCaseInsensitive

    Correct the case of the page name. Elements created from the
    page name in reset() are not updated because it's too messy, and
    this fix seems to be enough for now.

    Problems to fix later:

     - ["helponnavigation"] link to HelpOnNavigation but not
       considered as backlink.

    @param pagedir: the storage path to the page directory
    """
    if self._text_filename_force is None:
        # we only do this for normal pages, but not for the MissingPage,
        # because the code below is wrong in that case
        realPath = util.filesys.realPathCase(pagedir)
        if realPath is not None:
            realPath = wikiutil.unquoteWikiname(realPath)
            self.page_name = realPath[-len(self.page_name):]

</t>
<t tx="zoomq.20100311095515.4690">@tabwidth -4
@others
</t>
<t tx="zoomq.20100311095515.4691"># -*- coding: iso-8859-1 -*-
"""
    MoinMoin - File System Utilities

    @copyright: 2002 Juergen Hermann &lt;jh@web.de&gt;,
                2006-2008 MoinMoin:ThomasWaldmann
    @license: GNU GPL, see COPYING for details.
"""

import sys, os, shutil, time, errno
from stat import S_ISDIR, ST_MODE, S_IMODE

#from MoinMoin import log
#logging = log.getLogger(__name__)

</t>
<t tx="zoomq.20100311095515.4692">#############################################################################
### Misc Helpers
#############################################################################

def chmod(name, mode, catchexception=True):
    """ change mode of some file/dir on platforms that support it.
        usually you don't need this because we use os.umask() when importing
        request.py
    """
    try:
        os.chmod(name, mode)
    except OSError:
        if not catchexception:
            raise


</t>
<t tx="zoomq.20100311095515.4693">def rename(oldname, newname):
    """ Multiplatform rename

    Needed because win32 rename is not POSIX compliant, and does not
    remove target file if it exists.

    Problem: this "rename" is not atomic any more on win32.

    FIXME: What about rename locking? we can have a lock file in the
    page directory, named: PageName.lock, and lock this file before we
    rename, then unlock when finished.
    """
    if os.name == 'nt':
        if os.path.isfile(newname):
            try:
                os.remove(newname)
            except OSError:
                pass # let os.rename give us the error (if any)
    os.rename(oldname, newname)

</t>
<t tx="zoomq.20100311095515.4694">def touch(name):
    if sys.platform == 'win32':
        import win32file, win32con, pywintypes

        access = win32file.GENERIC_WRITE
        share = (win32file.FILE_SHARE_DELETE |
                 win32file.FILE_SHARE_READ |
                 win32file.FILE_SHARE_WRITE)
        create = win32file.OPEN_EXISTING
        mtime = time.gmtime()
        handle = win32file.CreateFile(name, access, share, None, create,
                                      win32file.FILE_ATTRIBUTE_NORMAL |
                                      win32con.FILE_FLAG_BACKUP_SEMANTICS,
                                      None)
        try:
            newTime = pywintypes.Time(mtime)
            win32file.SetFileTime(handle, newTime, newTime, newTime)
        finally:
            win32file.CloseHandle(handle)
    else:
        os.utime(name, None)


</t>
<t tx="zoomq.20100311095515.4695">def access_denied_decorator(fn):
    """ Due to unknown reasons, some os.* functions on Win32 sometimes fail
        with Access Denied (although access should be possible).
        Just retrying it a bit later works and this is what we do.
    """
    if sys.platform == 'win32':
        def wrapper(*args, **kwargs):
            max_retries = 10
            retry = 0
            while True:
                try:
                    return fn(*args, **kwargs)
                except OSError, err:
                    retry += 1
                    if retry &gt; max_retries:
                        raise
                    if err.errno == errno.EACCES:
                        logging.warning('%s(%r, %r) -&gt; access denied. retrying...' % (fn.__name__, args, kwargs))
                        time.sleep(0.01)
                        continue
                    raise
        return wrapper
    else:
        return fn

</t>
<t tx="zoomq.20100311095515.4696">stat = access_denied_decorator(os.stat)
mkdir = access_denied_decorator(os.mkdir)
rmdir = access_denied_decorator(os.rmdir)


def fuid(filename, max_staleness=3600):
    """ return a unique id for a file

        Using just the file's mtime to determine if the file has changed is
        not reliable - if file updates happen faster than the file system's
        mtime granularity, then the modification is not detectable because
        the mtime is still the same.

        This function tries to improve by using not only the mtime, but also
        other metadata values like file size and inode to improve reliability.

        For the calculation of this value, we of course only want to use data
        that we can get rather fast, thus we use file metadata, not file data
        (file content).

        Note: depending on the operating system capabilities and the way the
              file update is done, this function might return the same value
              even if the file has changed. It should be better than just
              using file's mtime though.
              max_staleness tries to avoid the worst for these cases.

        @param filename: file name of the file to look at
        @param max_staleness: if a file is older than that, we may consider
                              it stale and return a different uid - this is a
                              dirty trick to work around changes never being
                              detected. Default is 3600 seconds, use None to
                              disable this trickery. See below for more details.
        @return: an object that changes value if the file changed,
                 None is returned if there were problems accessing the file
    """
    try:
        st = os.stat(filename)
    except (IOError, OSError):
        uid = None  # for permanent errors on stat() this does not change, but
                    # having a changing value would be pointless because if we
                    # can't even stat the file, it is unlikely we can read it.
    else:
        fake_mtime = int(st.st_mtime)
        if not st.st_ino and max_staleness:
            # st_ino being 0 likely means that we run on a platform not
            # supporting it (e.g. win32) - thus we likely need this dirty
            # trick
            now = int(time.time())
            if now &gt;= st.st_mtime + max_staleness:
                fake_mtime = now
        uid = (st.st_mtime,  # might have a rather rough granularity, e.g. 2s
                             # on FAT and might not change on fast updates
               st.st_ino,  # inode number (will change if the update is done
                           # by e.g. renaming a temp file to the real file).
                           # not supported on win32 (0 ever)
               st.st_size,  # likely to change on many updates, but not
                            # sufficient alone
               fake_mtime,  # trick to workaround file system / platform
                            # limitations causing permanent trouble
              )
    return uid


</t>
<t tx="zoomq.20100311095515.4697">def copystat(src, dst):
    """Copy stat bits from src to dst

    This should be used when shutil.copystat would be used on directories
    on win32 because win32 does not support utime() for directories.

    According to the official docs written by Microsoft, it returns ENOACCES if the
    supplied filename is a directory. Looks like a trainee implemented the function.
    """
    if sys.platform == 'win32' and S_ISDIR(os.stat(dst)[ST_MODE]):
        if os.name == 'nt':
            st = os.stat(src)
            mode = S_IMODE(st[ST_MODE])
            if hasattr(os, 'chmod'):
                os.chmod(dst, mode) # KEEP THIS ONE!
        #else: pass # we are on Win9x,ME - no chmod here
    else:
        shutil.copystat(src, dst)


</t>
<t tx="zoomq.20100311095515.4698">def copytree(src, dst, symlinks=False):
    """Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    In contrary to shutil.copytree, this version also copies directory
    stats, not only file stats.

    """
    names = os.listdir(src)
    os.mkdir(dst)
    copystat(src, dst)
    errors = []
    for name in names:
        srcname = os.path.join(src, name)
        dstname = os.path.join(dst, name)
        try:
            if symlinks and os.path.islink(srcname):
                linkto = os.readlink(srcname)
                os.symlink(linkto, dstname)
            elif os.path.isdir(srcname):
                copytree(srcname, dstname, symlinks)
            else:
                shutil.copy2(srcname, dstname)
            # XXX What about devices, sockets etc.?
        except (IOError, os.error), why:
            errors.append((srcname, dstname, why))
    if errors:
        raise EnvironmentError, errors

</t>
<t tx="zoomq.20100311095515.4699"># Code could come from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65203

# we currently do not support locking
LOCK_EX = LOCK_SH = LOCK_NB = 0

def lock(file, flags):
    raise NotImplementedError

</t>
<t tx="zoomq.20100311095515.4700">def unlock(file):
    raise NotImplementedError


</t>
<t tx="zoomq.20100311095515.4701"># ----------------------------------------------------------------------
# Get real case of path name on case insensitive file systems
# TODO: nt version?

if sys.platform == 'darwin':

    def realPathCase(path):
        """ Return the real case of path e.g. PageName for pagename

        HFS and HFS+ file systems, are case preserving but case
        insensitive. You can't have 'file' and 'File' in the same
        directory, but you can get the real name of 'file'.

        @param path: string
        @rtype: string
        @return the real case of path or None
        """
        try:
            from Carbon import File
        except ImportError:
            return None
        try:
            return File.FSRef(path).as_pathname()
        except File.Error:
            return None

else:

    def realPathCase(path):
        return None

# dircache stuff seems to be broken on win32 (at least for FAT32, maybe NTFS)
DCENABLED = 1 # set to 0 to disable dirchache usage
def dcdisable():
    global DCENABLED
    DCENABLED = 0

</t>
<t tx="zoomq.20100311095515.4702">import dircache

def dclistdir(path):
    if sys.platform == 'win32' or not DCENABLED:
        return os.listdir(path)
    else:
        return dircache.listdir(path)

</t>
<t tx="zoomq.20100311095515.4703">def dcreset():
    if sys.platform == 'win32' or not DCENABLED:
        return
    else:
        return dircache.reset()
</t>
<t tx="zoomq.20100311095515.4704"></t>
<t tx="zoomq.20100311095515.4705">@path moinmaper/test
</t>
<t tx="zoomq.20100311095515.4706">@path moinmaper/_cron
</t>
<t tx="zoomq.20100311095515.4707"># /etc/crontab - root's crontab for FreeBSD
#
# $FreeBSD: src/etc/crontab,v 1.32.32.1 2008/11/25 02:59:29 kensmith Exp $
#
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
HOME=/var/log
#090418 append for moinmaper sync the AutoTest abt pages
*/15 *   *   *   *   /data0/ksmatrix/crontab/moinpages.sh  &gt; /dev/null 2&gt;&amp;1
</t>
<t tx="zoomq.20100311095515.4708">#!/bin/sh
#export LC_CTYPE=en_US.UTF-8
version="moinpages BSDv0.7 090421"
# for auto ls all abt moin page dir for AutoTest 
## deploy in 192.168.55.159
&lt;&lt;define&gt;&gt;
moinpages="/data0/moin17/data/pages/"
cronshell="/data0/ksmatrix/crontab"
moinmaper="$cronshell/moinmaper"
lsfile="moin-aut-$DATE.txt"
lsmoin="$cmdLs $moinpages | $cmdFGrep AutoTest "
#| $cmdTee $moinmaper/$lsfile"
LSALL="$lsmoin &gt; $moinmaper/$lsfile"
#/usr/bin/find /data0/moin17/data/pages/ -depth 1 -type d -name '*AutoTest*' 
LOGFILE="/data0/ksmatrix/logs/moinmaper/moin-ls-$DATE.log"
#"/data0/ksmatrix/logs/moinmaper/moin-ls-$DATE.log"


echo "###::ls and grep for AutoTest abt. wiki pages "
echo "###::ls and grep for AutoTest abt. wiki pages " &gt;&gt; $LOGFILE
cd $cronshell
pwd
pwd &gt;&gt; $LOGFILE

echo "###::start@" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE
#echo "$lsmoin"
echo "$LSALL"
sh -c "$LSALL" &gt;&gt; $LOGFILE 2&gt;&amp;1

#$lsmoin &gt;&gt; $LOGFILE 2&gt;&amp;1 
#&gt;&gt; $LOGFILE 2&gt;&amp;1 
echo "###::end@" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE

exit  0
</t>
<t tx="zoomq.20100311095515.4709">
cmdDate=$( which date)
cmdLs=$( which ls)
cmdTee=$( which tee)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing moinpages statistics -=$yesterday=-"
offset="-v-0d"
DATE="`$cmdDate $offset "+%y%m%d"`"

</t>
<t tx="zoomq.20100311095515.4710"># /etc/crontab - root's crontab for FreeBSD
#
# $FreeBSD: src/etc/crontab,v 1.32.32.1 2008/11/25 02:59:29 kensmith Exp $
#
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
HOME=/var/log
#090418 append in zoomq@192.168.54.100 for moinmaper sync the wiki ls data
1 *   *   *   *   /data0/ksmatrix/kup/tc/aut/_cron/syncmoin.sh  &gt; /dev/null 2&gt;&amp;1


</t>
<t tx="zoomq.20100311095515.4711">#!/bin/sh
#export LC_CTYPE=en_US.UTF-8
version="syncmoin BSDv0.7 090421"
# deploy in 192.168.54.100 for rsync ls moinmoin pages for AutoTest
&lt;&lt;define&gt;&gt;
mapath="/data0/ksmatrix/kup/tc/aut"
dirdata="$mapath/data/"
logdir="$mapath/_log"
LOGFILE="$logdir/moinmaper-$DATE.log"
lsfile="192.168.55.159:/data0/ksmatrix/crontab/moinmaper/"
#rsync -avz --delete 192.168.55.159:/data0/ksmatrix/crontab/moinmaper/ ./

echo "###::ls and grep for AutoTest abt. wiki pages " &gt;&gt; $LOGFILE
cd $dirdata
pwd
pwd &gt;&gt; $LOGFILE

echo "###::start@" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE
#echo "$lsmoin"
echo "$cmdRsync -avz --delete $lsfile ./"
$cmdRsync -avz --delete $lsfile ./ &gt;&gt; $LOGFILE 2&gt;&amp;1
#sh -c "$LSALL" &gt;&gt; $LOGFILE 2&gt;&amp;1

cd $mapath
lsfile="moin-aut-$DATE.txt"
python moinmaper.py data/$lsfile &gt;&gt; $LOGFILE 2&gt;&amp;1

#$lsmoin &gt;&gt; $LOGFILE 2&gt;&amp;1 
#&gt;&gt; $LOGFILE 2&gt;&amp;1 
echo "###::end@" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE

exit  0

</t>
<t tx="zoomq.20100311095515.4712">
cmdDate=$( which date)
cmdLs=$( which ls)
cmdTee=$( which tee)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdRsync=$( which rsync)

cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing moinpages statistics -=$yesterday=-"
offset="-v-0d"
DATE="`$cmdDate $offset "+%y%m%d"`"

</t>
<t tx="zoomq.20100311095515.4716"># -*- coding: utf-8 -*-
MM={'URL':"#"
    ,'RAW':"action=raw"
    ,"MAPNAME":"学生三元定义分析图谱 {by %(tv_rev)s @%(tv_timstamp)s}"
    ,"LWIDTH":1
    ,"LWSTEP":1
    ,"COLORSEED":998899
    ,"COLORSTEP":221221
    }

</t>
</tnodes>
</leo_file>
