#summary 项目过程改进 ZoomQuiet版 实践参考
#labels SLLS,ZoomQuiet,SllProjFlows

SEE::[SllProjectFlows SLL项目流程]

= 仨儿之建议集 =
== 介绍 ==

作为社区高级顾问，ZoomQuiet（仨儿）为社区发展提供了很多宝贵经验和建议，这里，我们将其汇总，供大家参考、学习

== 总纲 ==
{{{
开放社区,来去自由.不是传销,放心自去!
建议关注,有心再来.学生与否,有何关系?
不要自卑,自重为先;只要有益,都会听取?
既是终言,就此放下.持着执着,放不下矣!
就此放下,自去作事.待有成果,再来印证;-)
}}}


== 集文 ==
_不断添加中……_

*其实就两方面的建议::*
 # _*社区建设方面*_:
  # 如何建立社区?:
   * 原则:**定名->立旨->组队->坚持**
   * [ZqSayCommunityCreat 团队建设:立旨,组队,对外关联]
   * [ZqSayCommunityGrown 社区如何持续发展?进行团队建设?]
  # 如何管理社区资源
   * 1.4社区资源整理 
   * 1.5问题解决的智慧积累
  # 如何有效社区沟通
   * [ZqSayCommunityCommunicate 如何有效社区沟通]
  # 邮件的规范化使用
   * [ZqSayMailingList 高效使用邮件列表]
  # 维基的规范化使用
   * [ZqSayCommunityKnowledgeMana 如何利用维基进行社区知识管理?]
   * [ZqSayKnowledgeManagement 知识管理建议]
  # 沟通的规范化组织/通告/追踪社区项目/工程/计划
   * [ZqSayCommunityItems 社区项目管理规范化,高效化]
    * [ZqSayEduAnn2018 对于教育宣言项目的建议]
 # _*网络资源使用*_ :
  # 总体思路
{{{
嘿嘿嘿,从俺 M$ 时代"我自豪,我用D版!" 的软件大品尝,
到后来的唯绿色软件,
到现在的唯自由软件,整个软件/技术学习体验看,
就是:"Use it! need not learning!"
用之! 不学!

只用应该用的,不学现在不用的....

绝对不为学习而学习,而是使用现成的工具来创造...
}}}
  # 如何选择高效工具/服务
   * [ZqSayWYTIWYG 所想即所得:文本文件技巧]
  # 如何高效使用工具/服务
   * 针对BBS和"不靠谱"软件 
   * code.google 
   * wiki 
   * 思维分享工具 
   * 邮件管理软件
   * [ZqSayMindMapping 思维图谱]
  # 自由软件在教育领域
   * _*[ZqSayEduFreeSoftware 教育必须使用自由软件]*_ 
   
`如此而已,几乎都是直接使用即有的国际化社区的经验而已`


== 思绪 ==
XMind saring:[http://share.xmind.net/zoomquiet/sll-proj-zqsuggest/ sll-proj-zqsuggest]

http://xmindshare.s3.amazonaws.com/preview/sll-proj-zqsuggest-gdkjm-1228391386908.jpg
    



== 2.版本管理： ==

对于任何協作团队来讲，核心要命的支持管理就是"版本管理"

> >简单可行最好，如果需求工具太多，怕大家应付不过来。

是也乎,SVN 这个版本管理工具是任何对自个儿知识负责的人都应该学习和使用的,
这样才能够进入有版本管理的知识管理境界,

SVN + Trac 以及知识管理～一次培训的资料:
[http://www.zoomquiet.org/share/s5/0707-SVNnTrac/]

SVN, 可以方便统一的作到:

0. 将所有成员的工作，通过中央仓库的形式进行同步和安全的分发

1. 将成员所有交付成果，进行了版本管理，可以安全回溯到历史任何一个时间点

2. 对文本的冲突，进行了自动化的提醒，可以精确的汇报出差异，类似:
[http://wiki.woodpecker.org.cn/moin/TrustedGroup?action=diff&rev2=146&rev1=145]
或是: [http://tinyurl.com/5axbxs]

原始链接:
[http://trac.edgewall.org/changeset?new=7440%40trunk%2Ftrac%2Fwiki%2Fdefault-pages%2FTracModPython&old=7422%40trunk%2Ftrac%2Fwiki%2Fdefault-pages%2FTracModPython]

3. 可以通过分支的管理，对工程发行版本，进行并行维护...

总之对于团队工作的项目管理:
需求／变更／版本／发布 管理是有机结合在一起的，统称配置管理，
没有 CM ~ configure manage 配置管理，工程的进度，就无从控制，

～～～～

SVN 版本仓库,可以想象成一个中央存储,智能化的将所有人的成果合理合法的保存下来,所有人的工作,以SVN仓库为准,进行版本更替;
SVN 版本管理是来自CVS 等等更早的系统策略的,
比较经典的 FreeBSD 版本发布策略:
[http://www.freebsd.org/doc/en_US.ISO8859-1/articles/releng/release-proc.html]

所以,code.google 提供的 SVN 目录内含的版本策略是:
{{{
/ 仓库根
 +-- wiki 工程维基
 +-- tag  标签版本
 +-- trunk 主干分支
 +-- branches 版本分支
}}}
其中 tagu和branches 和从CVS 时代继承下来的习惯,但是在SVN中,俺建议:

[http://wiki.woodpecker.org.cn/moin/OssSvnRule]
{{{
/ 仓库根
 +-- wiki     工程维基
 +-- tasks    任务分支收集
 +-- tangle   试验代码收集
 +-- trunk    主干分支
 +-- branches 发布版本分支收集
}}}
这样SVN 的目录使用就根据不同的代码,或是文本性质进行了明确的分类:
{{{
+-- tasks    收集各种和主工程无关的辅助,支持性质任务代码
+-- tangle   对应开辟各种成员目录,收集平时的积累,成熟后就可以合并到 trunk 主干代码中
+-- trunk    主干分支, 所有最新的成果组织在期中
+-- branches 发布版本分支收集, 收集阶段性成果,并进行针对版本的追踪维护,比如说:
 +-- Ss4student_0.1_tadpole   v0.1 蝌蚪 版 图书稿和样例
 +-- Ss4student_0.2_frog      v0.2 青蛙 版 图书稿和样例
}}}
== 3.针对BBS和“不靠谱”软件 ==

社区研究之BBS的死亡鉴定
http://blog.donews.com/yokanta/archive/2006/06/05/902554.aspx

类似BBS 的重注意力，不重内容的沟通平台对于教育的推进和知识的积累只能起到破坏性的反作用！
对于实时交流，俺建议使用 IRC 聊天室，
配合插件可以自动记录到维基中...

任何改革，最困难的改变固有习惯，
与其在吸引来后，才一点点改变，
不如从开始就不要使用对知识管理无意义的BBS 等形式....

是也乎,这是个最最最基础FAQ:
凡是靠谱软件,一切都给予用户权力来配置的!
只要是有地方不让用户来自行配置的,都是没有自信的,有小秘密的 unkaopulity 软件!
好软件,就是最吻合自个儿习惯的软件!


== 5.code.google == 

*简介：*

配合有 SVN 版本管理后台的，
自动渲染发布环境，
通过WIKI 进行索引，通过SVN 进行协同发布，
通过列表进行沟通，
通过Issue 进行问题追踪...

*配置：*

[http://code.google.com/p/sociallearnlab/]
没有在 wiki 目录中有反应,所以,只能人工编辑,
俺重构了一下,
建议,这个工程首页,应该作为一个根索引页,作为所有其它页面的总入口,

另外,俺建议,在组织所有维基页面时,有个基本准则,就是任何一个维基页面从首页进行点击访问时,不应该超过3次点击!

接下来，应该将 code.google 和列表联动，
在工程的 admin. 标签中 Activity Notifications 一节有描述:
codesite-noreply@google.com
是工程的自动通告邮箱，将其加入到列表订阅中，配置成只 web 查阅，但是允许发送邮件，
就可以在 code.google 中设定，
将所有SVN 检入活动或是Issue 的提交情况，自动汇报给列表了....

*Issue追踪系统*

可惜，code.google 作为一个完备的项目管理环境，大家用的并不完全，Issue 是一个非常简洁好用的追踪系统，
可以进行任务分配/问题追踪/缺陷记录/需求设计,,,, 配合维基 更加可以完善的记录项目的进度,,,

> 我想肯定有一部分人，跟我一样，没有弄清楚Googelcode中Issue如何用。

感谢 xiuli 勇敢品尝螃蠏！

不过，从很久之前，以下两个专项说明页面，就是在工程首页的了:
Issue 提案流程概述
[http://code.google.com/p/sociallearnlab/wiki/IssueFlow]

 Issue 提案标签详解
 [http://code.google.com/p/sociallearnlab/wiki/IssueTags]

请大家查阅后，对比 xiuli 老师的操作，自个儿也尝试一下，
开始将大任务分解成可追踪的小任务，开始追踪/流通/分配吧,,,,

发现 Issue 的个性, 不是维基语法,对 URL 不进行自动解析,
但是对 Issue 相关的行动都有对应的自动解析了, 从我们创建 Issue 开始到完成任务:

0. 创建提案后, [http://code.google.com/p/sociallearnlab/issues/detail?id=5]
最后的 id= 的数字就是全球唯一的任务编号,,

1. 在Issue 中 任何地方使用 " Issue 5 " 这种格式的字串,就可以自动解析成提案的链接!

2. 在我们为此任务进行SVN 检入时的注释中就可以使用! 这样在 SVN 的Changeset 中,就可以自动解析出任务的链接:

 例如: [http://code.google.com/p/sociallearnlab/source/detail?r=525]

 Changeset 列表在:[http://code.google.com/p/sociallearnlab/source/list]

3. 最后我们回到 Issue 页面,可以使用 " r525 " 格式的字串来说明SVN的操作, 一样这将自动解析成链接,指向

[http://code.google.com/p/sociallearnlab/source/detail?r=525]

由此,一个具体任务的 创建/指派/完成/关闭 的整体过程的所有信息形成了完整的封闭循环!
{{{
Issue->认领->SVN检入解决
 ^            |
 |            |
 +--注释说明---+
}}}
*其他*

其实 code.google 提供的维基,就已经是非常吻合最小原则的有自动化版本协同的发布系统了;
因为 code.google 的维基和SVN 是联动的
[http://openbookproject.googlecode.com/svn/wiki/]
通过 SVN 对 维基的中的文本进行修订就可以直接获得 web 方面的修订!

e.g

[http://code.google.com/p/openbookproject/source/detail?r=1382]
的SVN 提交,就自然的修订了:
http://code.google.com/p/openbookproject/wiki/ZoomQuiet

而且已经有一些项目直接使用 这个简单维基进行了图书的撰写:
[http://code.google.com/p/zhpy/wiki/ByteOfZhpy]

～～～～

咔咔咔,这也是 code.google 在 Guido 加入后给出的完美解决方案:
{{{
[https://sociallearnlab.googlecode.com/svn/wiki/]
 + <-> [http://code.google.com/p/sociallearnlab/w/list]
 + <-> 用户本地 svn 工作复本
}}}
关系如上,对于code.google的维基 和 通过SVN 检入 wiki 目录, 是完全一样的,没有任何差别,

SVN 仓库, 对这两种表现都是个版本仓库,

不过,一个是在线编辑,一个是离线编辑;

在线的必须有网络,而且只能使用网页的输入框,

离线的,可以在任何地方放心的进行编辑,而且可以使用自个儿喜欢的编辑器进行!

再次建议!!!

在所有图书维基页面发布之前,先在 trunk 中创建组织好文档,维基发布出来后,就可以进行公众评阅了!

俺建议文件命名规范:
{{{
ZhGshAccountHowto.wiki
|  |  |           +-- wiki 后缀的纯 utf-8 文本文件,可以直接复制到 wiki 目录自动发布的
|  |  +-- 章节E文名,使用WikiName 格式
|  +-- 图书工程缩写
+-- 语言地域缩写 Zh|En|Tw|Fr ...
}}}









